{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"External-KEY","slug":"External-KEY","date":"2025-01-15T02:56:38.000Z","updated":"2025-01-15T03:06:42.171Z","comments":true,"path":"2025/01/15/External-KEY/","permalink":"http://example.com/2025/01/15/External-KEY/","excerpt":"","text":"往期内容STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)STM32F1基于HAL库的学习记录实用使用教程分享(二、GPIO_Input 按键) 前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Input的学习 随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，本次是单片机控制里很重要的一个概念：外部中断 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵。 一、外部中断中断机制在计算机系统中区分为硬件中断和软件中断两大类别。硬件中断源自外部设备，如硬盘I&#x2F;O的信号或通过定时器到达，它们通过发送信号以异步方式请求CPU的注意，即中断的发生与CPU当前执行的程序逻辑无直接关联。外部中断实际上是硬件中断的一个子集。 软件中断是由程序内部执行的特定指令（如中断指令或系统调用）所触发，其发生时间与程序执行流程紧密相关，因此被视为同步的。 这两种中断机制共同协作，确保了计算机系统既能及时响应外部事件，又能灵活管理内部资源和服务调用。 1.概念中断：打断CPU执行正常的程序，转而处理紧急程序，然后返回原暂停的程序继续运行。举例：学习ing——-听到老妈叫：吃饭啦！(中断请求)——-前去干饭——-吃完了——-继续学习 2.中断的作用一般来讲，中断有三个作用：实时控制：当温度较高时，自动开启空调功能。故障处理：出现错误时及时修正。数据传输：串口或其他通信方式进行数据的传输 3.中断优先级在中断处理机制中，优先级系统是为确保系统资源的高效分配和紧急事件的及时处理。 包括抢占优先级（pre）和响应优先级（sub）两个关键层面。抢占优先级决定了中断的打断能力，即高抢占优先级的中断能够打断正在执行的低抢占优先级中断，确保紧急任务得到优先处理。而响应优先级则在抢占优先级相同的情况下发挥作用，它决定了中断的响应顺序，即响应优先级高的中断会先被执行，但不同响应优先级的中断间不能相互打断。 当抢占优先级和响应优先级都相同时，自然优先级（通常基于中断向量表中的位置）将作为决定因素，自然优先级越高的中断将先被执行。这里的自然优先级实质上反映了中断在硬件或固件设计中的优先级排序。 在中断优先级体系中，通常遵循“数值越小，优先级越高”的原则，这意味着更低数值的优先级设置代表更高的中断处理优先级，从而确保系统能够迅速响应最紧急的事件 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.引脚配置(1).选择引脚和模式本文是基于第一篇文章的LED后进行的操作，有不了解的同学可以移步STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)进行配置。根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_EXIT，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO modeExternal Interrupt Mode with Rising edge trigger detection上升沿触发外部中断 External Interrupt Mode with Falling edge trigger detection下降沿触发外部中断 External Interrupt Mode with Rising&#x2F;Falling edge trigger detection上升沿或下降沿触发外部中断 External Event Mode with Rising edge trigger detection上升沿触发外部事件 External Event Mode with Falling edge trigger detection下降沿触发外部事件 External Event ode with Rising&#x2F;Falling edge trigger detection上升沿或下降沿触发外部事件 (B).GPIO Pull-up&#x2F;Pull-down通过电路的硬件结构进行上拉或下拉配置 (C).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：KEY(在此我仅以PE6举例，其他引脚(按键)同理)。 (D).配置优先级Priority Group默认为4个比特位，一般情况下不需要改。 Preemption Priority &amp; Sub Priority抢占优先级，数字越小，优先级越高若抢占优先级相同，判断子优先级，同样，数字越小，优先级越高 6.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序sys.h、led.h、stm32f1xx_it.c和stm32f10x_it.h在我的第一篇博客STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)里。 1.HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);此函数用于读取引脚状态，通过GPIO的IDR寄存器读取。电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOE。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_6。在main.h中可找到宏定义： 1234/* Private defines -----------------------------------------------------------*/#define KEY_Pin GPIO_PIN_6#define KEY_GPIO_Port GPIOE#define KEY_EXTI_IRQn EXTI9_5_IRQn 设置按键回调函数为 12345678910111213 /* USER CODE BEGIN 4 */ void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)&#123; if(GPIO_Pin == KEY_Pin) &#123; if(Exit_flag == 0) &#123; Exit_flag = 1; LED_flag = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin); &#125; &#125;&#125; /* USER CODE END 4 */ 在主函数循环内检测 123456789101112131415161718192021222324252627282930313233343536while (1) &#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ if(Exit_flag == 1) &#123; Exit_flag = 2; if(LED_flag== GPIO_PIN_RESET) &#123; HAL_Delay(20); if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET) &#123; HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); Exit_flag = 0; &#125; else &#123; Exit_flag = 0; &#125; &#125; else if(LED_flag== GPIO_PIN_SET) &#123; HAL_Delay(20); if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) &#123; HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); Exit_flag = 0; &#125; else &#123; Exit_flag = 0; &#125; &#125; &#125; &#125; 以此实现按键控制小灯状态的功能。 四、演示效果 总结本篇内容略少，但这也是为后期的内容做铺垫衔接。后面的内容“干货”会更多一些，敬请期待。 又是经过一个充实而忙碌的夜晚，深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于**OLED屏幕（IIC）**的学习分享。 与此同时我计划将我的微机原理课程设计逐步分享出来 感谢大家的关注与支持！ 参考文献引用【STM32HAL库】外部中断STM32 CubeMX学习：6. 按键的外部中断","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"GPIO-input","slug":"GPIO-input","date":"2025-01-14T17:36:39.000Z","updated":"2025-01-14T16:44:09.150Z","comments":true,"path":"2025/01/15/GPIO-input/","permalink":"http://example.com/2025/01/15/GPIO-input/","excerpt":"","text":"往期内容STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output) 前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Input的学习 随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，按键的控制即为大部分同学的第二课——按键（GPIO_Input）。 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵。 一、GPIO_InputGPIO支持4种输入模式，分别为：浮空输入、上拉输入、下拉输入、模拟输入。模拟输入的部分我们留在后面的ADC部分再详谈。 1.浮空输入(GPIO_Mode_IN_FLOATING)No pull-up and no pull-down IO口引脚电平是真实的外部连接器件电压，电平有不确定性。 2.上拉输入(GPIO_Mode_IPU)Pull-up I&#x2F;O口默认通过电阻上拉到VCC,不接外部器件时可以读出高电平 3.下拉输入(GPIO_Mode_IPD)Pull-down I&#x2F;O口默认通过电阻下拉到GND,不接外部器件时可以读出低电平 图1-2 下拉输入 4.上拉和下拉的区分用一句话概括：按键外接GND为上拉，外接VCC为下拉。 原因上拉输入就像是给IO口里面接了一个小小的电阻，这个电阻的另一头连着电源正极（VCC）。这样一来，如果外面没接啥东西或者接了个接地的按键没按，IO口就会“知道”是高电平，就像是灯一直是亮着的状态。 这种设置适合那些接地的按键，因为一按按键，IO口就能“知道”电平变化，知道按键被按了。 下拉输入也是给IO口里面接了个电阻，但这回电阻的另一头连着的是地（GND）。这样，如果外面啥也没接或者接了个接电源正极的按键没按，IO口就会“感觉”到是低电平，就像是灯一直是关着的状态。当你按下那个接电源正极的按键时，IO口就能察觉到电平的变化，知道有动作发生了。 下拉输入适合那些接电源正极的按键。 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.KEY引脚配置(1).选择引脚和模式本文是基于上一篇文章的LED后进行的操作，有不了解的同学可以移步STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)进行配置。根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_Input，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO Pull-up&#x2F;Pull-down通过电路的硬件结构进行上拉或下拉配置 (B).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：KEY_IN(在此我仅以PE6举例，其他引脚(按键)同理)。 6.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序sys.h、led.h、stm32f1xx_it.c和stm32f10x_it.h在我的第一篇博客STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)里。 1.HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);此函数用于读取引脚状态，通过GPIO的IDR寄存器读取。电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOE。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_6。由于我在User Laber中已将PE6定义标签“KEY_IN”故在main.h中可找到宏定义： 123/* Private defines -----------------------------------------------------------*/#define KEY_IN_Pin GPIO_PIN_6#define KEY_IN_GPIO_Port GPIOE 故按键的检测程序为 1234567891011121314151617/* USER CODE BEGIN WHILE */while (1)&#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ //有按键(PE6)按下 if(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) == GPIO_PIN_RESET) &#123; /* 软件消抖 */ HAL_Delay(20); /* 等待按键1松开 */ while(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) != GPIO_PIN_SET);//当按键松开后才执行后续程序，否则将不断在while里循环 HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);/* 翻转LED*/ &#125;&#125;/* USER CODE END 3 */ 以此实现按键控制小灯状态的功能。 2.按键消抖方法一：软件消抖一般来讲，大部分的消抖方案是使用10~20ms的延时程序进行消抖，这是由于在使用机械按键的时候会产生不稳定的前沿抖动，若不消去抖动的话，在CPU的高速运行状态下极易出现判断失误，当抖动消失后再一次检测键的状态，如果仍保持新电平状态，则确认为真正有键按下。如下代码为普遍的写法逻辑。 12345678910111213//有按键(PE6)按下 if(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) == GPIO_PIN_RESET) &#123; /* 软件消抖 */ HAL_Delay(20); /* 等待按键1松开 */ if(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) == GPIO_PIN_RESET) &#123; HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);/* 翻转LED*/ while(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) != GPIO_PIN_SET);//当按键松开后才执行后续程序，否则将不断在while里循环 &#125; &#125; /* USER CODE END 3 */ 方法二：硬件消抖在学习的过程中，我了解到在按键数量不大的情况下可以使用RS触发器进行消抖操作。为了深入理解，我选择用Proteus进行仿真观察一下，如图3-1。由于精力的原因，没做成动画，仅是简单进行截图演示。 对于RS触发器的原理，简单概括为即使有抖动但是在经过双稳态电路之后，便可输出“漂亮”的矩形波其对比效果如下图，黄色为RS触发器，蓝色为普通的按键： 3.其他方法由于在程序代码中，添加过多延时会浪费CPU资源，造成影响其他功能的使用并产生实时数据滞后性的可能。在后期我将介绍利用中断和ADC的方式进行按键的判断。而在实际应用中，这些方法往往更常用更好用。 四、演示效果 总结本篇内容略少，但这也是为后期的内容做铺垫衔接。后面的关键按键的内容“干货”会更多一些，敬请期待。 又是经过一个充实而忙碌的夜晚，深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于外部中断和对于双击和长按方法的检测的学习分享。 感谢大家的关注与支持！ 参考文献引用【野火】按键消抖模块的设计与验证","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"GPIO-output","slug":"GPIO-output","date":"2025-01-14T14:45:07.000Z","updated":"2025-01-14T16:44:06.692Z","comments":true,"path":"2025/01/14/GPIO-output/","permalink":"http://example.com/2025/01/14/GPIO-output/","excerpt":"","text":"前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Output的学习本文原链接随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，LED的控制即为大部分同学的第一课——点灯（GPIO_Output）。 本系列对于各个软件的下载及部分配置过程将带过，有需要的同学可以参考其他的博客和经验分享。 本系列使用的芯片有STM32F103C8T6、STM32F103ZET6、STM32F743VIT6。大部分为基于STM32F103ZET6单片机。 常使用的软件包括但不限于：STM32CubeMX6.11.1、STM32CubeIDE 1.15.1、MDK-ARM 5.35、嘉立创EDA(专业版)、SOLIDWORKS 2021、OpenMV IDE、PyCharm、Anaconda。 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵 一、GPIO_OutputGPIO支持4种输出模式，分别为：推挽输出、开漏输出、推挽复用输出、开漏复用输出。其后两种复用输出模式一般都是用于外设使用，本文不做过多介绍。 1.推挽输出(Output Push Pull)推挽输出同时在标准库里也叫做：GPIO_Mode_Out_PP推挽复用输出同时在标准库里也叫做：GPIO_Mode_Out_PP IO口输出0或1。一般情况下都是选取这种模式。该模式可以输出高低电平，连接外部数字器件进行控制。 在推挽输出状态下，如果高电平和低电平直接连接在一起，会导致短路电流流入(倒灌)，这极有可能会损坏设备。（由此造成过惨痛的教训） 2.开漏输出(Output Open Drain)开漏输出同时在标准库里也叫做：GPIO_Mode_Out_OD开漏复用输出同时在标准库里也叫做：GPIO_Mode_AF_OD I&#x2F;O口输出0或1。在没有连接上拉电阻的情况下，该接口只能输出低电平，而无法驱动高电平。要实现高电平输出，必须借助外部的上拉电阻。需要注意的是，I&#x2F;O口的实际电平与输出电平可能不一致，这取决于连接的上拉电阻。 开漏输出的一个重要优势是能够灵活地调节输出电平，因为输出电平由上拉电阻所连接的电源电压来决定。因此，开漏输出一般用于需要电平转换的场合。 开漏输出的另一个好处在于可以实现**”线与”**功能，所谓的”线与”指的是多个信号线直接连接在一起，只有当所有信号全部为高电平时，合在一起的总线为高电平；只要有任意一个或者多个信号为低电平，则总线为低电平。 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.LED引脚配置(1).选择引脚和模式根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_Output，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO output levelLow ：IO初始化默认输出低电平High：IO初始化默认输出高电平 (B).GPIO modeOutput Open Drain，开漏输出Output Push Pull ，推挽输出 (C).GPIO Pull-up&#x2F;Pull-downNo pull-up and no pull-down，浮空输入，配置为不上拉和下拉Pull-up，上拉输入Pull-down，下拉输入 (D).Maximum output speedLow，GPIO速度为低速，通常为2MHZMedium，GPIO速度为中速，通常为10MHZHigh，GPIO速度为高速，通常为50MHZ (E).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：LED。 5.基本定时器（TIM6、TIM7）配置(1).勾选Activated(2).Prescaler (PSC -16 bits value)PSC即为预分频，其参数配置支持 1~65536我在这里使用7199 (3).Counter Period (AutoReload Register - 16 bits value )ARR是一个16位的寄存器，这里装着计数器能计数的最大数值。当计数到这个值的时候，如果使能了中断的话，定时器就会产生溢出中断。我在这里使用99 (4).auto-reload preload自动重装载预加载，在此选择Enable (5).NVIC Settings开启TIM6中断 6.定时时间计算(1).Tout&#x3D;((ARR+1)*(PSC+1))&#x2F;TclkTclk为定时器挂载的时钟线的频率。对于STM32F103而言最高为72Mhz（根据自己的设置有关），具体看配置的时钟树。 在这里我们的溢出时间为：((7199+1)*(99+1))&#x2F;72us&#x3D;10000us&#x3D;10ms 7.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序1.HAL_GPIO_WritePin(GPIO_TypeDef* GPIOX,uint16_t GPIO_Pin,GPIO_PinState pinstate);电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOC。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_13。pinstate代表当前引脚的高低电平，一般来讲：高电平(GPIO_PIN_SET)、低电平(GPIO_PIN_RESET)。由于我在User Laber中已将PC13定义标签“LED”故在main.h中可找到宏定义： 123/* Private defines -----------------------------------------------------------*/#define LED_Pin GPIO_PIN_13#define LED_GPIO_Port GPIOC 故令小灯闪烁的程序为 1234567891011 while (1) &#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);//点亮小灯HAL_Delay(1000);//延时1秒（1000毫秒）HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);//熄灭小灯HAL_Delay(1000);//延时1秒（1000毫秒） &#125; /* USER CODE END 3 */ 以此实现小灯1秒内的循环闪烁效果 2.HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOX,uint16_t GPIO_Pin);电平翻转HAL函数 123456789while (1)&#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);//反转小灯HAL_Delay(1000);//延时1秒（1000毫秒）&#125; /* USER CODE END 3 */ 以此写法也可以实现每秒翻转一次小灯状态。 3.LED&#x3D;!LED;该写法来源是参考标准库的写法，在后续其他的代码参考与移植中可以变得便利一些。毕竟标准库的例程和开源程序还是有很多的。 同时作为我的学习过程记录备份和代码整体结构的学习记录分享。 (1).sys.h新建一个sys.h文件并写入以下内容并在外部调用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#ifndef __SYS_H#define __SYS_H #include &quot;stm32f1xx_hal.h&quot;//0,不支持OS//1,支持OS#define SYSTEM_SUPPORT_OS 0 //定义系统文件夹是否支持OS //位带操作,实现51类似的GPIO控制功能//具体实现思想,参考&lt;&lt;CM3权威指南&gt;&gt;第五章(87页~92页).//IO口操作宏定义#define BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2)) #define MEM_ADDR(addr) *((volatile unsigned long *)(addr)) #define BIT_ADDR(addr, bitnum) MEM_ADDR(BITBAND(addr, bitnum)) //IO口地址映射#define GPIOA_ODR_Addr (GPIOA_BASE+12) //0x4001080C #define GPIOB_ODR_Addr (GPIOB_BASE+12) //0x40010C0C #define GPIOC_ODR_Addr (GPIOC_BASE+12) //0x4001100C #define GPIOD_ODR_Addr (GPIOD_BASE+12) //0x4001140C #define GPIOE_ODR_Addr (GPIOE_BASE+12) //0x4001180C #define GPIOF_ODR_Addr (GPIOF_BASE+12) //0x40011A0C #define GPIOG_ODR_Addr (GPIOG_BASE+12) //0x40011E0C #define GPIOA_IDR_Addr (GPIOA_BASE+8) //0x40010808 #define GPIOB_IDR_Addr (GPIOB_BASE+8) //0x40010C08 #define GPIOC_IDR_Addr (GPIOC_BASE+8) //0x40011008 #define GPIOD_IDR_Addr (GPIOD_BASE+8) //0x40011408 #define GPIOE_IDR_Addr (GPIOE_BASE+8) //0x40011808 #define GPIOF_IDR_Addr (GPIOF_BASE+8) //0x40011A08 #define GPIOG_IDR_Addr (GPIOG_BASE+8) //0x40011E08 //IO口操作,只对单一的IO口!//确保n的值小于16!#define PAout(n) BIT_ADDR(GPIOA_ODR_Addr,n) //输出#define PAin(n) BIT_ADDR(GPIOA_IDR_Addr,n) //输入#define PBout(n) BIT_ADDR(GPIOB_ODR_Addr,n) //输出#define PBin(n) BIT_ADDR(GPIOB_IDR_Addr,n) //输入#define PCout(n) BIT_ADDR(GPIOC_ODR_Addr,n) //输出#define PCin(n) BIT_ADDR(GPIOC_IDR_Addr,n) //输入#define PDout(n) BIT_ADDR(GPIOD_ODR_Addr,n) //输出#define PDin(n) BIT_ADDR(GPIOD_IDR_Addr,n) //输入#define PEout(n) BIT_ADDR(GPIOE_ODR_Addr,n) //输出#define PEin(n) BIT_ADDR(GPIOE_IDR_Addr,n) //输入#define PFout(n) BIT_ADDR(GPIOF_ODR_Addr,n) //输出#define PFin(n) BIT_ADDR(GPIOF_IDR_Addr,n) //输入#define PGout(n) BIT_ADDR(GPIOG_ODR_Addr,n) //输出#define PGin(n) BIT_ADDR(GPIOG_IDR_Addr,n) //输入//Ex_NVIC_Config专用定义#define GPIO_A 0#define GPIO_B 1#define GPIO_C 2#define GPIO_D 3#define GPIO_E 4#define GPIO_F 5#define GPIO_G 6 #define FTIR 1 //下降沿触发#define RTIR 2 //上升沿触发 //JTAG模式设置定义#define JTAG_SWD_DISABLE 0X02#define SWD_ENABLE 0X01#define JTAG_SWD_ENABLE 0X00 typedef int32_t s32;typedef int16_t s16;typedef int8_t s8;typedef const int32_t sc32;typedef const int16_t sc16;typedef const int8_t sc8;typedef __IO int32_t vs32;typedef __IO int16_t vs16;typedef __IO int8_t vs8;typedef __I int32_t vsc32;typedef __I int16_t vsc16;typedef __I int8_t vsc8;typedef uint32_t u32;typedef uint16_t u16;typedef uint8_t u8;typedef const uint32_t uc32;typedef const uint16_t uc16;typedef const uint8_t uc8;typedef __IO uint32_t vu32;typedef __IO uint16_t vu16;typedef __IO uint8_t vu8;typedef __I uint32_t vuc32;typedef __I uint16_t vuc16;typedef __I uint8_t vuc8;#endif (2).led.h新建一个led.h文件并写入以下内容并在外部调用： 12345678#ifndef __LED_H#define __LED_H #include &quot;sys.h&quot;#define LED PCout(13) #endif 将PC13引脚进行宏定义 命名为LED (3).stm32f1xx_it.c和stm32f10x_it.hstm32f10x_it.c和stm32f10x_it.h一般是存放STM32工程的中断函数的文件。在此我省去了自动生成的大部分程序，仅留下需要我们人为添加的部分stm32f10x_it.c 12345678910111213141516171819202122232425262728/* Includes ------------------------------------------------------------------*/#include &quot;main.h&quot;#include &quot;stm32f1xx_it.h&quot;/* Private includes ----------------------------------------------------------*//* USER CODE BEGIN Includes */#include &quot;led.h&quot;/* USER CODE END Includes *//* USER CODE BEGIN PM */uint16_t TimerCount10ms = 0;//10ms中断计数变量uint16_t TimerCount500ms = 0;//500ms中断计数变量/* USER CODE END PM *//* USER CODE BEGIN 1 */void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//定时器溢出中断回调函数&#123;//定时器中断时，每进行完一个中断，并不会立刻退出，而是会进入到中断回调函数中 if(htim == &amp;htim6)//10ms进入一次定时器6的中断 &#123; TimerCount10ms=1;//10ms中断计数变量标志位 TimerCount500ms++;//每进入一次中断计数加1 if(TimerCount500ms%50 == 0)//当整除50时进入判断 &#123; LED=!LED;//反转小灯 &#125; &#125;&#125;/* USER CODE END 1 */ stm32f10x_it.hextern 表明变量或者函数是定义在其他其他文件中的。简单理解为：外部调用其他文件中定义的变量即可 1234/* USER CODE BEGIN EFP */extern uint16_t TimerCount10ms;//10ms中断计数变量extern uint16_t TimerCount500ms;//500ms中断计数变量/* USER CODE END EFP */ (4).main.c在此我省去了自动生成的大部分程序，仅留下需要我们人为添加的部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/* Includes ------------------------------------------------------------------*/#include &quot;main.h&quot;#include &quot;tim.h&quot;#include &quot;gpio.h&quot;/* Private includes ----------------------------------------------------------*//* USER CODE BEGIN Includes */#include &quot;led.h&quot;#include &quot;sys.h&quot;/* USER CODE END Includes *//* Private typedef -----------------------------------------------------------*//* USER CODE BEGIN PTD *//* USER CODE END PTD *//* Private define ------------------------------------------------------------*//* USER CODE BEGIN PD *//* USER CODE END PD *//* Private macro -------------------------------------------------------------*//* USER CODE BEGIN PM *//* USER CODE END PM *//* Private variables ---------------------------------------------------------*//* USER CODE BEGIN PV *//* USER CODE END PV *//* Private function prototypes -----------------------------------------------*/void SystemClock_Config(void);/* USER CODE BEGIN PFP *//* USER CODE END PFP *//* Private user code ---------------------------------------------------------*//* USER CODE BEGIN 0 *//* USER CODE END 0 *//** * @brief The application entry point. * @retval int */int main(void)&#123; /* USER CODE BEGIN 1 */ /* USER CODE END 1 */ /* MCU Configuration--------------------------------------------------------*/ /* Reset of all peripherals, Initializes the Flash interface and the Systick. */ HAL_Init(); /* USER CODE BEGIN Init */ /* USER CODE END Init */ /* Configure the system clock */ SystemClock_Config(); /* USER CODE BEGIN SysInit */ /* USER CODE END SysInit */ /* Initialize all configured peripherals */ MX_GPIO_Init(); MX_ADC1_Init(); MX_TIM6_Init(); MX_USART1_UART_Init(); MX_TIM4_Init(); /* USER CODE BEGIN 2 */ HAL_TIM_Base_Start_IT(&amp;htim6); //开启定时器6中断 /* USER CODE END 2 */ /* Infinite loop */ /* USER CODE BEGIN WHILE */ while (1) &#123; if(TimerCount10ms==1)//10ms执行一次 &#123; //在此处可以放入一些执行函数 TimerCount10ms=0;//将标志位置0 &#125; &#125; /* USER CODE END 3 */ 四、演示效果 总结经过一个充实而忙碌的夜晚，我满怀热情地撰写了一篇关于单片机学习的文章，虽然已尽力详尽，但深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于GPIO_Input的学习分享。 感谢大家的关注与支持 参考文献引用嵌入式-STM32-GPIO输出和输入的HAL库函数GPIO推挽输出和开漏输出模式区别详解【野火】TIM-基本定时器","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2025-01-07T15:58:54.459Z","updated":"2025-01-07T15:58:54.459Z","comments":true,"path":"2025/01/07/hello-world/","permalink":"http://example.com/2025/01/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]}