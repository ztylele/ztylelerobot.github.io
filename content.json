{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"GPIO-output","slug":"GPIO-output","date":"2025-01-14T14:45:07.000Z","updated":"2025-01-14T15:26:43.791Z","comments":true,"path":"2025/01/14/GPIO-output/","permalink":"http://example.com/2025/01/14/GPIO-output/","excerpt":"","text":"前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Output的学习 随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，LED的控制即为大部分同学的第一课——点灯（GPIO_Output）。 本系列对于各个软件的下载及部分配置过程将带过，有需要的同学可以参考其他的博客和经验分享。 本系列使用的芯片有STM32F103C8T6、STM32F103ZET6、STM32F743VIT6。大部分为基于STM32F103ZET6单片机。 常使用的软件包括但不限于：STM32CubeMX6.11.1、STM32CubeIDE 1.15.1、MDK-ARM 5.35、嘉立创EDA(专业版)、SOLIDWORKS 2021、OpenMV IDE、PyCharm、Anaconda。 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵 一、GPIO_OutputGPIO支持4种输出模式，分别为：推挽输出、开漏输出、推挽复用输出、开漏复用输出。其后两种复用输出模式一般都是用于外设使用，本文不做过多介绍。 1.推挽输出(Output Push Pull)推挽输出同时在标准库里也叫做：GPIO_Mode_Out_PP推挽复用输出同时在标准库里也叫做：GPIO_Mode_Out_PP IO口输出0或1。一般情况下都是选取这种模式。该模式可以输出高低电平，连接外部数字器件进行控制。 在推挽输出状态下，如果高电平和低电平直接连接在一起，会导致短路电流流入(倒灌)，这极有可能会损坏设备。（由此造成过惨痛的教训） 2.开漏输出(Output Open Drain)开漏输出同时在标准库里也叫做：GPIO_Mode_Out_OD开漏复用输出同时在标准库里也叫做：GPIO_Mode_AF_OD I&#x2F;O口输出0或1。在没有连接上拉电阻的情况下，该接口只能输出低电平，而无法驱动高电平。要实现高电平输出，必须借助外部的上拉电阻。需要注意的是，I&#x2F;O口的实际电平与输出电平可能不一致，这取决于连接的上拉电阻。 开漏输出的一个重要优势是能够灵活地调节输出电平，因为输出电平由上拉电阻所连接的电源电压来决定。因此，开漏输出一般用于需要电平转换的场合。 开漏输出的另一个好处在于可以实现**”线与”**功能，所谓的”线与”指的是多个信号线直接连接在一起，只有当所有信号全部为高电平时，合在一起的总线为高电平；只要有任意一个或者多个信号为低电平，则总线为低电平。 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： ![](images&#x2F;2-1 RCC.png)![](GPIO-output&#x2F;2-1 RCC.png) 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.LED引脚配置(1).选择引脚和模式根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_Output，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO output levelLow ：IO初始化默认输出低电平High：IO初始化默认输出高电平 (B).GPIO modeOutput Open Drain，开漏输出Output Push Pull ，推挽输出 (C).GPIO Pull-up&#x2F;Pull-downNo pull-up and no pull-down，浮空输入，配置为不上拉和下拉Pull-up，上拉输入Pull-down，下拉输入 (D).Maximum output speedLow，GPIO速度为低速，通常为2MHZMedium，GPIO速度为中速，通常为10MHZHigh，GPIO速度为高速，通常为50MHZ (E).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：LED。 5.基本定时器（TIM6、TIM7）配置(1).勾选Activated(2).Prescaler (PSC -16 bits value)PSC即为预分频，其参数配置支持 1~65536我在这里使用7199 (3).Counter Period (AutoReload Register - 16 bits value )ARR是一个16位的寄存器，这里装着计数器能计数的最大数值。当计数到这个值的时候，如果使能了中断的话，定时器就会产生溢出中断。我在这里使用99 (4).auto-reload preload自动重装载预加载，在此选择Enable (5).NVIC Settings开启TIM6中断 6.定时时间计算(1).Tout&#x3D;((ARR+1)*(PSC+1))&#x2F;TclkTclk为定时器挂载的时钟线的频率。对于STM32F103而言最高为72Mhz（根据自己的设置有关），具体看配置的时钟树。 在这里我们的溢出时间为：((7199+1)*(99+1))&#x2F;72us&#x3D;10000us&#x3D;10ms 7.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序1.HAL_GPIO_WritePin(GPIO_TypeDef* GPIOX,uint16_t GPIO_Pin,GPIO_PinState pinstate);电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOC。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_13。pinstate代表当前引脚的高低电平，一般来讲：高电平(GPIO_PIN_SET)、低电平(GPIO_PIN_RESET)。由于我在User Laber中已将PC13定义标签“LED”故在main.h中可找到宏定义： 123/* Private defines -----------------------------------------------------------*/#define LED_Pin GPIO_PIN_13#define LED_GPIO_Port GPIOC 故令小灯闪烁的程序为 1234567891011 while (1) &#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);//点亮小灯HAL_Delay(1000);//延时1秒（1000毫秒）HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);//熄灭小灯HAL_Delay(1000);//延时1秒（1000毫秒） &#125; /* USER CODE END 3 */ 以此实现小灯1秒内的循环闪烁效果 2.HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOX,uint16_t GPIO_Pin);电平翻转HAL函数 123456789while (1)&#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);//反转小灯HAL_Delay(1000);//延时1秒（1000毫秒）&#125; /* USER CODE END 3 */ 以此写法也可以实现每秒翻转一次小灯状态。 3.LED&#x3D;!LED;该写法来源是参考标准库的写法，在后续其他的代码参考与移植中可以变得便利一些。毕竟标准库的例程和开源程序还是有很多的。 同时作为我的学习过程记录备份和代码整体结构的学习记录分享。 (1).sys.h新建一个sys.h文件并写入以下内容并在外部调用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#ifndef __SYS_H#define __SYS_H #include &quot;stm32f1xx_hal.h&quot;//0,不支持OS//1,支持OS#define SYSTEM_SUPPORT_OS 0 //定义系统文件夹是否支持OS //位带操作,实现51类似的GPIO控制功能//具体实现思想,参考&lt;&lt;CM3权威指南&gt;&gt;第五章(87页~92页).//IO口操作宏定义#define BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2)) #define MEM_ADDR(addr) *((volatile unsigned long *)(addr)) #define BIT_ADDR(addr, bitnum) MEM_ADDR(BITBAND(addr, bitnum)) //IO口地址映射#define GPIOA_ODR_Addr (GPIOA_BASE+12) //0x4001080C #define GPIOB_ODR_Addr (GPIOB_BASE+12) //0x40010C0C #define GPIOC_ODR_Addr (GPIOC_BASE+12) //0x4001100C #define GPIOD_ODR_Addr (GPIOD_BASE+12) //0x4001140C #define GPIOE_ODR_Addr (GPIOE_BASE+12) //0x4001180C #define GPIOF_ODR_Addr (GPIOF_BASE+12) //0x40011A0C #define GPIOG_ODR_Addr (GPIOG_BASE+12) //0x40011E0C #define GPIOA_IDR_Addr (GPIOA_BASE+8) //0x40010808 #define GPIOB_IDR_Addr (GPIOB_BASE+8) //0x40010C08 #define GPIOC_IDR_Addr (GPIOC_BASE+8) //0x40011008 #define GPIOD_IDR_Addr (GPIOD_BASE+8) //0x40011408 #define GPIOE_IDR_Addr (GPIOE_BASE+8) //0x40011808 #define GPIOF_IDR_Addr (GPIOF_BASE+8) //0x40011A08 #define GPIOG_IDR_Addr (GPIOG_BASE+8) //0x40011E08 //IO口操作,只对单一的IO口!//确保n的值小于16!#define PAout(n) BIT_ADDR(GPIOA_ODR_Addr,n) //输出#define PAin(n) BIT_ADDR(GPIOA_IDR_Addr,n) //输入#define PBout(n) BIT_ADDR(GPIOB_ODR_Addr,n) //输出#define PBin(n) BIT_ADDR(GPIOB_IDR_Addr,n) //输入#define PCout(n) BIT_ADDR(GPIOC_ODR_Addr,n) //输出#define PCin(n) BIT_ADDR(GPIOC_IDR_Addr,n) //输入#define PDout(n) BIT_ADDR(GPIOD_ODR_Addr,n) //输出#define PDin(n) BIT_ADDR(GPIOD_IDR_Addr,n) //输入#define PEout(n) BIT_ADDR(GPIOE_ODR_Addr,n) //输出#define PEin(n) BIT_ADDR(GPIOE_IDR_Addr,n) //输入#define PFout(n) BIT_ADDR(GPIOF_ODR_Addr,n) //输出#define PFin(n) BIT_ADDR(GPIOF_IDR_Addr,n) //输入#define PGout(n) BIT_ADDR(GPIOG_ODR_Addr,n) //输出#define PGin(n) BIT_ADDR(GPIOG_IDR_Addr,n) //输入//Ex_NVIC_Config专用定义#define GPIO_A 0#define GPIO_B 1#define GPIO_C 2#define GPIO_D 3#define GPIO_E 4#define GPIO_F 5#define GPIO_G 6 #define FTIR 1 //下降沿触发#define RTIR 2 //上升沿触发 //JTAG模式设置定义#define JTAG_SWD_DISABLE 0X02#define SWD_ENABLE 0X01#define JTAG_SWD_ENABLE 0X00 typedef int32_t s32;typedef int16_t s16;typedef int8_t s8;typedef const int32_t sc32;typedef const int16_t sc16;typedef const int8_t sc8;typedef __IO int32_t vs32;typedef __IO int16_t vs16;typedef __IO int8_t vs8;typedef __I int32_t vsc32;typedef __I int16_t vsc16;typedef __I int8_t vsc8;typedef uint32_t u32;typedef uint16_t u16;typedef uint8_t u8;typedef const uint32_t uc32;typedef const uint16_t uc16;typedef const uint8_t uc8;typedef __IO uint32_t vu32;typedef __IO uint16_t vu16;typedef __IO uint8_t vu8;typedef __I uint32_t vuc32;typedef __I uint16_t vuc16;typedef __I uint8_t vuc8;#endif (2).led.h新建一个led.h文件并写入以下内容并在外部调用： 12345678#ifndef __LED_H#define __LED_H #include &quot;sys.h&quot;#define LED PCout(13) #endif 将PC13引脚进行宏定义 命名为LED (3).stm32f1xx_it.c和stm32f10x_it.hstm32f10x_it.c和stm32f10x_it.h一般是存放STM32工程的中断函数的文件。在此我省去了自动生成的大部分程序，仅留下需要我们人为添加的部分stm32f10x_it.c 12345678910111213141516171819202122232425262728/* Includes ------------------------------------------------------------------*/#include &quot;main.h&quot;#include &quot;stm32f1xx_it.h&quot;/* Private includes ----------------------------------------------------------*//* USER CODE BEGIN Includes */#include &quot;led.h&quot;/* USER CODE END Includes *//* USER CODE BEGIN PM */uint16_t TimerCount10ms = 0;//10ms中断计数变量uint16_t TimerCount500ms = 0;//500ms中断计数变量/* USER CODE END PM *//* USER CODE BEGIN 1 */void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//定时器溢出中断回调函数&#123;//定时器中断时，每进行完一个中断，并不会立刻退出，而是会进入到中断回调函数中 if(htim == &amp;htim6)//10ms进入一次定时器6的中断 &#123; TimerCount10ms=1;//10ms中断计数变量标志位 TimerCount500ms++;//每进入一次中断计数加1 if(TimerCount500ms%50 == 0)//当整除50时进入判断 &#123; LED=!LED;//反转小灯 &#125; &#125;&#125;/* USER CODE END 1 */ stm32f10x_it.hextern 表明变量或者函数是定义在其他其他文件中的。简单理解为：外部调用其他文件中定义的变量即可 1234/* USER CODE BEGIN EFP */extern uint16_t TimerCount10ms;//10ms中断计数变量extern uint16_t TimerCount500ms;//500ms中断计数变量/* USER CODE END EFP */ (4).main.c在此我省去了自动生成的大部分程序，仅留下需要我们人为添加的部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/* Includes ------------------------------------------------------------------*/#include &quot;main.h&quot;#include &quot;tim.h&quot;#include &quot;gpio.h&quot;/* Private includes ----------------------------------------------------------*//* USER CODE BEGIN Includes */#include &quot;led.h&quot;#include &quot;sys.h&quot;/* USER CODE END Includes *//* Private typedef -----------------------------------------------------------*//* USER CODE BEGIN PTD *//* USER CODE END PTD *//* Private define ------------------------------------------------------------*//* USER CODE BEGIN PD *//* USER CODE END PD *//* Private macro -------------------------------------------------------------*//* USER CODE BEGIN PM *//* USER CODE END PM *//* Private variables ---------------------------------------------------------*//* USER CODE BEGIN PV *//* USER CODE END PV *//* Private function prototypes -----------------------------------------------*/void SystemClock_Config(void);/* USER CODE BEGIN PFP *//* USER CODE END PFP *//* Private user code ---------------------------------------------------------*//* USER CODE BEGIN 0 *//* USER CODE END 0 *//** * @brief The application entry point. * @retval int */int main(void)&#123; /* USER CODE BEGIN 1 */ /* USER CODE END 1 */ /* MCU Configuration--------------------------------------------------------*/ /* Reset of all peripherals, Initializes the Flash interface and the Systick. */ HAL_Init(); /* USER CODE BEGIN Init */ /* USER CODE END Init */ /* Configure the system clock */ SystemClock_Config(); /* USER CODE BEGIN SysInit */ /* USER CODE END SysInit */ /* Initialize all configured peripherals */ MX_GPIO_Init(); MX_ADC1_Init(); MX_TIM6_Init(); MX_USART1_UART_Init(); MX_TIM4_Init(); /* USER CODE BEGIN 2 */ HAL_TIM_Base_Start_IT(&amp;htim6); //开启定时器6中断 /* USER CODE END 2 */ /* Infinite loop */ /* USER CODE BEGIN WHILE */ while (1) &#123; if(TimerCount10ms==1)//10ms执行一次 &#123; //在此处可以放入一些执行函数 TimerCount10ms=0;//将标志位置0 &#125; &#125; /* USER CODE END 3 */ 四、演示效果[video(video-l5siLITy-1722402495354)(type-csdn)(url-https://live.csdn.net/v/embed/413973)(image-https://i-blog.csdnimg.cn/blog_migrate/74f98865f800dd8713d2efbd5aa6898a.jpeg)(title-GPIO_LED)] 总结经过一个充实而忙碌的夜晚，我满怀热情地撰写了一篇关于单片机学习的文章，虽然已尽力详尽，但深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于GPIO_Input的学习分享。 感谢大家的关注与支持 参考文献引用嵌入式-STM32-GPIO输出和输入的HAL库函数GPIO推挽输出和开漏输出模式区别详解【野火】TIM-基本定时器","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2025-01-07T15:58:54.459Z","updated":"2025-01-07T15:58:54.459Z","comments":true,"path":"2025/01/07/hello-world/","permalink":"http://example.com/2025/01/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}