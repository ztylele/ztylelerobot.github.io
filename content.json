{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Hello World","slug":"hello-world","date":"2025-01-07T15:58:54.459Z","updated":"2025-01-07T15:58:54.459Z","comments":true,"path":"2025/01/07/hello-world/","permalink":"http://example.com/2025/01/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"STM32F103ZET6 单片机 GPIO 控制入门","slug":"EMbeddedtest","date":"2023-10-30T04:00:00.000Z","updated":"2025-01-09T12:35:33.328Z","comments":true,"path":"2023/10/30/EMbeddedtest/","permalink":"http://example.com/2023/10/30/EMbeddedtest/","excerpt":"","text":"前言随着嵌入式技术的快速发展，越来越多的人加入到了这片领域。作为入门学习的第一步，单片机控制 LED 灯（GPIO 输出）是许多同学的第一课。本文将以 STM32F103ZET6 单片机为例，分享如何进行基本的 GPIO 输出操作。 在本系列教程中，我们将简要介绍所用的工具和软件，以及如何从基础配置开始逐步实现 LED 控制，帮助初学者快速入门。我们将使用 STM32CubeMX 和 STM32CubeIDE 来进行开发，必要时也会涉及其他的一些软件工具。 GPIO 输出基本概念GPIO 输出模式在 STM32 系列单片机中，GPIO 支持以下几种输出模式： 推挽输出 (Output Push Pull): 允许同时输出高低电平并能够直接连接外部电路。常用于LED等简单控制。 开漏输出 (Output Open Drain): 只能输出低电平，高电平需要通过外部上拉电阻实现。多用于需要电平转换或者线与功能的场景。 了解这些模式可以帮助开发者在硬件设计中做出更合理的选择。 配置流程1. 项目创建通过 STM32CubeMX 创建新项目。在项目配置中，选择 STM32F103ZET6 芯片，并根据自己的硬件情况配置时钟树。一般来说，选择外部晶体谐振器（CRYSTAL）作为时钟源是较为推荐的方式。 2. 配置 GPIO 引脚选择 GPIO 引脚，并将其模式设置为 GPIO_Output。可以选择推挽输出模式，因为这通常是控制 LED 灯的首选模式。 另需配置该引脚的初始状态（低电平或高电平）和速率。同时，为了提高代码的可维护性，建议为引脚定义一个用户标签。 3. 定时器配置为了实现 LED 闪烁效果，通常会使用定时器。通过配置 TIM6 定时器，实现每隔 1000ms 反转一次 LED 状态。这将让我们的 LED 灯以每秒的速度闪烁。 4. 代码实现在生成的代码中，我们可以利用 HAL 库提供的函数进行 GPIO 输出操作。例如，使用 HAL_GPIO_WritePin() 函数控制 LED 的点亮和熄灭。 以简单的闪烁程序为例，代码如下： while (1) &#123; HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // 点亮LED HAL_Delay(1000); // 延时1秒 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // 熄灭LED HAL_Delay(1000); // 延时1秒 &#125; ---","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"GPIO","slug":"GPIO","permalink":"http://example.com/tags/GPIO/"}]}],"categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"GPIO","slug":"GPIO","permalink":"http://example.com/tags/GPIO/"}]}