{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"OLED-IIC","slug":"OLED-IIC","date":"2025-01-15T07:52:14.000Z","updated":"2025-01-15T07:56:13.993Z","comments":true,"path":"2025/01/15/OLED-IIC/","permalink":"http://example.com/2025/01/15/OLED-IIC/","excerpt":"","text":"往期内容STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output) STM32F1基于HAL库的学习记录实用使用教程分享(二、GPIO_Input 按键) STM32F1基于HAL库的学习记录实用使用教程分享(三、外部中断 按键) 前言本文记录了通过使用STM32F103ZET6单片机进行OLED_IIC的学习 随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，本次是单片机控制里很重要的一个通信协议：IIC 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵。 一、IICIIC（Inter-Integrated Circuit，集成电路间总线）是一种同步的多主机通信总线，广泛用于连接微控制器与其他设备，如传感器、存储器等。IIC总线支持多个主设备和从设备之间的通信，可以在软件和硬件层面上进行。这两者之间的主要区别在于实现方式和控制机制。 硬件IIC 专用硬件支持：硬件 IIC 由微控制器或其他设备内部的专用硬件模块实现，包括 IIC 总线控制器和物理层接口。这种设计使得 IIC 通信更为高效，能够直接处理信号的发送和接收。 自动控制：硬件 IIC 模块能够自动管理 IIC 协议的所有细节，包括起始条件、地址传输、数据传输和应答信号等。这种自动化处理减少了微控制器的负担，使其能将更多的资源用于其他任务。 高效性：由于硬件 IIC 模块在独立的硬件层面上运作，因此其数据传输效率通常高于软件 IIC。硬件 IIC 能在执行通信时，同时并行处理其他操作，从而提高系统整体性能。 资源占用：虽然硬件 IIC 提高了通信效率，但也可能会占用更多的硬件资源，如 GPIO 引脚 和 内部寄存器。这意味着在设计电路时需要考虑资源的合理配置。 灵活性：硬件 IIC 的灵活性相对较低，其功能和特性由硬件电路设计决定，调整和改动的可能性有限。相比之下，软件 IIC 更具灵活性，可以根据需要进行编程和修改。 适用场景：硬件 IIC 非常适合于对 实时性 和 性能 要求较高的应用，尤其是在需要频繁进行数据传输的情况下。而软件 IIC 则更适合于对硬件资源要求较少和灵活性较高的场合，例如在开发测试阶段或快速原型设计时。 软件IIC软件实现：软件 IIC 不依赖于专用的硬件模块，而是通过软件编程来模拟 IIC 协议的所有操作。这使得它可以在没有专用硬件支持的系统上实现 IIC 通信。 控制信号生成：软件 IIC 通过手动控制 GPIO 引脚 来生成 IIC 总线上的时钟信号（SCL）和数据线信号（SDA）。这种方式的灵活性使得用户能够准确调整信号的启动和传输过程。 效率：由于软件 IIC 需要 CPU 时间来生成和处理 IIC 信号，其效率通常低于硬件 IIC。在高频次传输的应用中，软件 IIC 可能成为性能瓶颈。 资源占用：相较于硬件 IIC，软件 IIC 占用的硬件资源更少，仅需几个 GPIO 引脚 来支持基本的通信。这使得软件 IIC 成为资源受限环境中的良好选择。 灵活性：软件 IIC 具有高度的灵活性，能够根据需要调整时序和协议细节，特别适合在没有硬件 IIC 模块的设备上或需要特定定制的应用场景。开发者可以轻松地修改代码来满足特定需求。 适用场景：软件 IIC 特别适用于快速原型开发、测试或小规模系统，并在实施定制通信协议或实验性功能时表现出色。它为灵活的设计和修改提供了便利，尤其在开发过程中需要频繁调整的情况下尤为有效。 1.概念IIC（Inter-Integrated Circuit）总线是一种由 NXP（原 PHILIPS）公司开发的两线式串行通信协议。这种总线主要用于连接微控制器与其外围设备，广泛应用于主控制器与从器件之间的主从通信。 其特征包括： 两线制设计：IIC 总线仅使用两根信号线——数据线（SDA）和时钟线（SCL），简化了连接和布线。 主从通信：在 IIC 总线上，通信是以主从架构进行的，任意时刻只能有一个主机向多个从器件发送命令。因此，主机负责控制通信过程，而从器件执行接收和响应。 短距离传输：IIC 总线主要适用于小数据量的场合，传输距离相对较短，通常不超过几米。这使得它特别适合于PCB（印刷电路板）内的设备互联。 最高速度：高速 IIC 总线的传输速率可达 400 kbps，适合于需要快速数据传输的应用。在某些情况下，IIC 的速率甚至可以提升至 1 Mbps，满足更高性能的需求。 双向通信：IIC 总线支持在 CPU 与被控 IC 之间、IC 与 IC 之间的双向数据传输。这种双向能力使得设备之间可以轻松地交换信息。 应用场景IIC 总线被广泛应用于各种项目和产品，包括但不限于： 传感器：用于与各种传感器或执行器的连接，如温度传感器、气体传感器、显示器等。嵌入式系统：在微控制器与外围设备之间建立有效的通信链路。消费电子：如智能家居、便携式设备等领域，提供高效的数据传输解决方案。 2.IIC作用一般来讲，中断有三个作用：实时控制：当温度较高时，自动开启空调功能。故障处理：出现错误时及时修正。数据传输：串口或其他通信方式进行数据的传输 3.IIC的特点IIC初始化与信号 初始化在 IIC 总线的初始化阶段，SCL（时钟线）和 SDA（数据线）均应保持在高电平状态。这一状态表示总线处于空闲等待状态，准备进行后续的通信。 开始信号开始信号的生成步骤如下： 保持 SCL 高电平：在发送开始信号前，确保时钟线 SCL 维持在高电平状态。 SDA 由高变低：在 SCL 处于高电平时，数据线 SDA 必须从高电平转为低电平。拉低 SCL：最后，将 SCL 线拉低，完成开始信号的发送。此时，设备进入数据传输状态。 停止信号停止信号的生成步骤如下： 拉高 SCL：首先将 SCL 线拉高，确保与总线通信的同步。 SDA 由低变高：在 SCL 高电平时，数据线 SDA 从低电平变为高电平。这一过程标志着数据传输的结束，设备重新回到空闲状态。 IIC 总线的优缺点优点 硬件资源节约：由于只使用两条线，IIC 总线在连接和电路设计上显著降低了硬件资源的占用。 协议设计精巧：IIC 协议结构简单，易于理解和实现，使其成为开发者的优先选择。 易用性强：由于其简单的架构和广泛的应用场景，IIC 总线具有较高的易用性。 适用性广泛：广泛应用于传输命令、数据采集等场景，具有良好的互操作性，便于移植到不同的平台和设备。 缺点 传输速率较慢：相比于其他总线协议（如 SPI 和 UART）而言，IIC 总线的最大传输速率相对较低，这在需要高带宽数据传输的场合可能成为瓶颈。 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC2.SYS3.时钟树以上三个部分再前三期文章中都已赘述过，而且也很基础，故在从今以后的文章中都会省略，有需要的同学可翻阅往期文章查阅。STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output) 4.引脚配置软件IIC(1).选择引脚和模式本文是基于第一篇文章的LED后进行的操作，有不了解的同学可以移步STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)进行配置。根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_Output，如图2-1 ： (2).进行细节配置在此 硬件IIC(1).选择引脚和模式本文是基于第一篇文章的LED后进行的操作，有不了解的同学可以移步STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)进行配置。根据硬件点击所需要使用的引脚，之后在弹窗里选择IIC1_SCL IIC1_SDA，如图2-3 ： (2).进行细节配置在此 5.工程项目生成该部分在前面的文章中也多次提及，在此不再赘述。 三、程序sys.h、led.h、stm32f1xx_it.c和stm32f10x_it.h在我的第一篇博客STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)里。 软件IICGPIOX代表目标引脚的端口号，例如GPIOG。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_2。在main.h中可找到宏定义： 12345/* Private defines -----------------------------------------------------------*/#define OLED_SCL_Pin GPIO_PIN_2#define OLED_SCL_GPIO_Port GPIOG#define OLED_SDA_Pin GPIO_PIN_3#define OLED_SDA_GPIO_Port GPIOG 定义数组 1uint8_t OledString[50]; //OLED显示使用的字符串数组 初始化并且在主函数循环内检测 1234567891011121314151617181920212223242526 /* USER CODE BEGIN 2 */OLED_Init();OLED_Clear();OLED_Display_On();/* USER CODE END 2 *//* Infinite loop *//* USER CODE BEGIN WHILE */while (1)&#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */OLED_ShowNum(1,1,5,1,1);//显示数字float temp = 0;for(temp=0;temp&lt;10;temp++)&#123; sprintf((char *)OledString,&quot;temp:%.2f&quot;,temp);//显示温度 OLED_ShowString(1,2,OledString,12); //显示在OLED上 HAL_Delay(200);&#125;OLED_ShowCHinese(1,6,0); //嵌 OLED_ShowCHinese(17,6,1); //入OLED_ShowCHinese(33,6,2); //式&#125;/* USER CODE END 3 */ 以此实现OLED显示的功能。 下面是OLED的驱动函数 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289////////////////////////////////////////////////////////////////////////////////// // oled.c// 作者 : ZTY// 创建日期 : 2024-05-16// 说明 : 0.96寸 OLED 显示屏驱动程序 (STM32F103ZE，通过 IIC 接口)// 接线说明 : // ----------------------------------------------------------------// GND 接地// VCC 供电 5V 或 3.3V// SCL 时钟线连接 PG2 (SCL)// SDA 数据线连接 PG3 (SDA) // ----------------------------------------------------------------//////////////////////////////////////////////////////////////////////////////////#include &quot;oled.h&quot;#include &quot;stdlib.h&quot;#include &quot;oledfont.h&quot;// OLED 显示的操作函数定义// 启动 IIC 通信void IIC_Start() &#123; OLED_SCLK_Set(); // 设置时钟线为高 OLED_SDIN_Set(); // 设置数据线为高 OLED_SDIN_Clr(); // 将数据线拉低 OLED_SCLK_Clr(); // 将时钟线拉低以准备发送数据&#125;// 停止 IIC 通信void IIC_Stop() &#123; OLED_SCLK_Set(); // 设置时钟线为高 OLED_SDIN_Clr(); // 将数据线拉低 OLED_SDIN_Set(); // 将数据线拉高以结束通信&#125;// 等待 IIC 回应void IIC_Wait_Ack() &#123; OLED_SCLK_Set(); // 设置时钟线为高 OLED_SCLK_Clr(); // 将时钟线拉低&#125;// 写入一个字节到 IICvoid Write_IIC_Byte(unsigned char IIC_Byte) &#123; unsigned char i; unsigned char m, da; da = IIC_Byte; OLED_SCLK_Clr(); // 开始时将时钟线拉低 for (i = 0; i &lt; 8; i++) &#123; // 逐位输出字节 m = da; m = m &amp; 0x80; // 取出最高位 if (m == 0x80) &#123; OLED_SDIN_Set(); // 发送 1 &#125; else &#123; OLED_SDIN_Clr(); // 发送 0 &#125; da = da &lt;&lt; 1; // 左移数据 OLED_SCLK_Set(); // 发送时钟信号 OLED_SCLK_Clr(); // 拉低以准备下一位 &#125;&#125;// 发送命令到 OLEDvoid Write_IIC_Command(unsigned char IIC_Command) &#123; IIC_Start(); // 启动 IIC Write_IIC_Byte(0x78); // 从设备地址 IIC_Wait_Ack(); // 等待设备应答 Write_IIC_Byte(0x00); // 写入命令 IIC_Wait_Ack(); // 等待应答 Write_IIC_Byte(IIC_Command); // 发送命令字节 IIC_Wait_Ack(); // 等待应答 IIC_Stop(); // 停止 IIC&#125;// 发送数据到 OLEDvoid Write_IIC_Data(unsigned char IIC_Data) &#123; IIC_Start(); // 启动 IIC Write_IIC_Byte(0x78); // 从设备地址 IIC_Wait_Ack(); // 等待设备应答 Write_IIC_Byte(0x40); // 写入数据 IIC_Wait_Ack(); // 等待应答 Write_IIC_Byte(IIC_Data); // 发送数据字节 IIC_Wait_Ack(); // 等待应答 IIC_Stop(); // 停止 IIC&#125;// 根据数据和命令标识写入数据void OLED_WR_Byte(unsigned dat, unsigned cmd) &#123; if (cmd) &#123; Write_IIC_Data(dat); // 如果是数据 &#125; else &#123; Write_IIC_Command(dat); // 如果是命令 &#125;&#125;// 填充整个画面void fill_picture(unsigned char fill_Data) &#123; unsigned char m, n; for (m = 0; m &lt; 8; m++) &#123; // OLED 有 8 页 OLED_WR_Byte(0xb0 + m, 0); // 设置页地址 OLED_WR_Byte(0x00, 0); // 设置低列地址 OLED_WR_Byte(0x10, 0); // 设置高列地址 for (n = 0; n &lt; 128; n++) &#123; // 每页有 128 列 OLED_WR_Byte(fill_Data, 1); // 填充数据 &#125; &#125;&#125;// 延时 50 毫秒void Delay_50ms(unsigned int Del_50ms) &#123; unsigned int m; for (; Del_50ms &gt; 0; Del_50ms--) &#123; for (m = 6245; m &gt; 0; m--); // 根据系统时钟调整 &#125;&#125;// 延时 1 毫秒void Delay_1ms(unsigned int Del_1ms) &#123; unsigned char j; while (Del_1ms--) &#123; for (j = 0; j &lt; 123; j++); // 根据系统时钟调整 &#125;&#125;// 设置 OLED 的显示位置void OLED_Set_Pos(unsigned char x, unsigned char y) &#123; OLED_WR_Byte(0xb0 + y, OLED_CMD); // 设置页地址 OLED_WR_Byte(((x &amp; 0xf0) &gt;&gt; 4) | 0x10, OLED_CMD); // 设置列地址 OLED_WR_Byte((x &amp; 0x0f), OLED_CMD); // 设置低 4 位列地址&#125;// OLED 开启显示void OLED_Display_On(void) &#123; OLED_WR_Byte(0X8D, OLED_CMD); // 设置充电泵 OLED_WR_Byte(0X14, OLED_CMD); // 启动充电泵 OLED_WR_Byte(0XAF, OLED_CMD); // 开启显示&#125;// OLED 关闭显示void OLED_Display_Off(void) &#123; OLED_WR_Byte(0X8D, OLED_CMD); // 设置充电泵 OLED_WR_Byte(0X10, OLED_CMD); // 关闭充电泵 OLED_WR_Byte(0XAE, OLED_CMD); // 关闭显示&#125;// 清空显示内容void OLED_Clear(void) &#123; uint8_t i, n; for (i = 0; i &lt; 8; i++) &#123; // 遍历每一页 OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址 OLED_WR_Byte(0x00, OLED_CMD); // 设置低列地址 OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址 for (n = 0; n &lt; 128; n++) &#123; OLED_WR_Byte(0, OLED_DATA); // 填充空白数据 &#125; &#125;&#125;// OLED 开启所有像素void OLED_On(void) &#123; uint8_t i, n; for (i = 0; i &lt; 8; i++) &#123; OLED_WR_Byte(0xb0 + i, OLED_CMD); // 设置页地址 OLED_WR_Byte(0x00, OLED_CMD); // 设置低列地址 OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址 for (n = 0; n &lt; 128; n++) &#123; OLED_WR_Byte(1, OLED_DATA); // 显示为全白 &#125; &#125;&#125;// 在指定位置显示字符void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t Char_Size) &#123; unsigned char c = chr - &#x27; &#x27;; // 获取 ASCII 码索引 if (x &gt; Max_Column - 1) &#123; x = 0; // 超过最大列数，回到第一列 y += 2; // 换行 &#125; if (Char_Size == 16) &#123; // 大字符 OLED_Set_Pos(x, y); for (unsigned char i = 0; i &lt; 8; i++) OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA); OLED_Set_Pos(x, y + 1); for (unsigned char i = 0; i &lt; 8; i++) OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA); &#125; else &#123; // 小字符 OLED_Set_Pos(x, y); for (unsigned char i = 0; i &lt; 6; i++) OLED_WR_Byte(F6x8[c][i], OLED_DATA); &#125;&#125;// 指数函数uint32_t oled_pow(uint8_t m, uint8_t n) &#123; uint32_t result = 1; while (n--) result *= m; return result;&#125;// 在指定位置显示数字void OLED_ShowNum(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size2) &#123; uint8_t t, temp; uint8_t enshow = 0; // 标记是否已经开始显示 for (t = 0; t &lt; len; t++) &#123; temp = (num / oled_pow(10, len - t - 1)) % 10; // 取得当前位数字 if (enshow == 0 &amp;&amp; t &lt; (len - 1)) &#123; if (temp == 0) &#123; OLED_ShowChar(x + (size2 / 2) * t, y, &#x27; &#x27;, size2); // 不显示 0 continue; &#125; else &#123; enshow = 1; // 一旦显示数字，不再显示空格 &#125; &#125; OLED_ShowChar(x + (size2 / 2) * t, y, temp + &#x27;0&#x27;, size2); // 显示数字 &#125;&#125;// 在指定位置显示字符串void OLED_ShowString(uint8_t x, uint8_t y, uint8_t *chr, uint8_t Char_Size) &#123; unsigned char j = 0; while (chr[j] != &#x27;\\0&#x27;) &#123; OLED_ShowChar(x, y, chr[j], Char_Size); // 显示字符 x += 8; // 下一个字符距离 if (x &gt; 120) &#123; // 如果超出一行长度，换行 x = 0; y += 2; &#125; j++; &#125;&#125;// 显示中文字符void OLED_ShowCHinese(uint8_t x, uint8_t y, uint8_t no) &#123; uint8_t t; OLED_Set_Pos(x, y); for (t = 0; t &lt; 16; t++) &#123; OLED_WR_Byte(Hzk[2 * no][t], OLED_DATA); // 显示上半部分 &#125; OLED_Set_Pos(x, y + 1); for (t = 0; t &lt; 16; t++) &#123; OLED_WR_Byte(Hzk[2 * no + 1][t], OLED_DATA); // 显示下半部分 &#125;&#125;// 绘制 BMP 位图void OLED_DrawBMP(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, unsigned char BMP[]) &#123; unsigned int j = 0; unsigned char x, y; if (y1 % 8 == 0) y = y1 / 8; else y = y1 / 8 + 1; // 判断总共的页数 for (y = y0; y &lt; y1; y++) &#123; OLED_Set_Pos(x0, y); // 设置起始位置 for (x = x0; x &lt; x1; x++) &#123; OLED_WR_Byte(BMP[j++], OLED_DATA); // 绘制 BMP 数据 &#125; &#125;&#125; // 初始化 OLED 显示屏void OLED_Init(void) &#123; HAL_Delay(800); // 等待 OLED 准备 OLED_WR_Byte(0xAE, OLED_CMD); // 关闭显示 OLED_WR_Byte(0x00, OLED_CMD); // 设置低列地址 OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址 OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行 OLED_WR_Byte(0xB0, OLED_CMD); // 设置页地址 OLED_WR_Byte(0x81, OLED_CMD); // 对比度控制 OLED_WR_Byte(0xFF, OLED_CMD); // 128 OLED_WR_Byte(0xA1, OLED_CMD); // 设置段重映射 OLED_WR_Byte(0xA6, OLED_CMD); // 正常显示 OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比率 OLED_WR_Byte(0x3F, OLED_CMD); // 1/64 duty OLED_WR_Byte(0xC8, OLED_CMD); // 器件扫描方向 OLED_WR_Byte(0xD3, OLED_CMD); // 设置偏移 OLED_WR_Byte(0x00, OLED_CMD); // none OLED_WR_Byte(0xD5, OLED_CMD); // 设置时钟分频 OLED_WR_Byte(0x80, OLED_CMD); // none OLED_WR_Byte(0xD8, OLED_CMD); // 设置区域色彩模式 OLED_WR_Byte(0x05, OLED_CMD); // none OLED_WR_Byte(0xD9, OLED_CMD); // 设定预充电周期 OLED_WR_Byte(0xF1, OLED_CMD); // none OLED_WR_Byte(0xDA, OLED_CMD); // 设置 COM 引脚配置 OLED_WR_Byte(0x12, OLED_CMD); // none OLED_WR_Byte(0xDB, OLED_CMD); // 设置 Vcomh 电压 OLED_WR_Byte(0x30, OLED_CMD); // none OLED_WR_Byte(0x8D, OLED_CMD); // 设置充电泵使能 OLED_WR_Byte(0x14, OLED_CMD); // 启用充电泵 OLED_WR_Byte(0xAF, OLED_CMD); // 开启显示&#125; 其对应的头文件为 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//////////////////////////////////////////////////////////////////////////////////// oled.h // 作者 : ZTY// 创建日期 : 2024-05-16// 说明 : 0.96寸 OLED 显示屏驱动程序 (STM32F103ZE，通过 IIC 接口)// 接线说明 : // ----------------------------------------------------------------// GND 接地// VCC 供电 5V 或 3.3V// SCL 时钟线连接 PG2 (SCL)// SDA 数据线连接 PG3 (SDA) // ----------------------------------------------------------------//////////////////////////////////////////////////////////////////////////////////#ifndef __OLED_H#define __OLED_H #include &quot;stdlib.h&quot; #include &quot;main.h&quot; #define OLED_MODE 0#define SIZE 8#define XLevelL 0x00#define XLevelH 0x10#define Max_Column 128#define Max_Row 64#define Brightness 0xFF #define X_WIDTH 128#define Y_WIDTH 64 //-----------------OLED IIC端口定义---------------- #define OLED_SCLK_Clr() HAL_GPIO_WritePin(OLED_SCL_GPIO_Port, OLED_SCL_Pin, GPIO_PIN_RESET)//设置SCL低电平#define OLED_SCLK_Set() HAL_GPIO_WritePin(OLED_SCL_GPIO_Port, OLED_SCL_Pin, GPIO_PIN_SET)//设置SCL高电平#define OLED_SDIN_Clr() HAL_GPIO_WritePin(OLED_SDA_GPIO_Port,OLED_SDA_Pin,GPIO_PIN_RESET)//设置SDA低电平#define OLED_SDIN_Set() HAL_GPIO_WritePin(OLED_SDA_GPIO_Port,OLED_SDA_Pin,GPIO_PIN_SET)//设置SDA高电平 #define OLED_CMD 0 //写命令#define OLED_DATA 1 //写数据//OLED控制用函数void OLED_WR_Byte(unsigned dat,unsigned cmd); void OLED_Display_On(void);void OLED_Display_Off(void); void OLED_Init(void);void OLED_Clear(void);void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t);void OLED_Fill(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2,uint8_t dot);void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t Char_Size);void OLED_ShowNum(uint8_t x,uint8_t y,uint32_t num,uint8_t len,uint8_t size);void OLED_ShowString(uint8_t x,uint8_t y, uint8_t *p,uint8_t Char_Size); void OLED_Set_Pos(unsigned char x, unsigned char y);void OLED_ShowCHinese(uint8_t x,uint8_t y,uint8_t no);void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP[]);void Delay_50ms(unsigned int Del_50ms);void Delay_1ms(unsigned int Del_1ms);void fill_picture(unsigned char fill_Data);void Picture(void);void IIC_Start(void);void IIC_Stop(void);void Write_IIC_Command(unsigned char IIC_Command);void Write_IIC_Data(unsigned char IIC_Data);void Write_IIC_Byte(unsigned char IIC_Byte);void IIC_Wait_Ack(void);#endif 将字符数据存在这个头文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215#ifndef __OLEDFONT_H#define __OLEDFONT_H //常用ASCII表//偏移量32//ASCII字符集//偏移量32//大小:12*6/************************************6*8的点阵************************************/const unsigned char F6x8[][6] = &#123;0x00, 0x00, 0x00, 0x00, 0x00, 0x00,// sp0x00, 0x00, 0x00, 0x2f, 0x00, 0x00,// !0x00, 0x00, 0x07, 0x00, 0x07, 0x00,// &quot;0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14,// #0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12,// $0x00, 0x62, 0x64, 0x08, 0x13, 0x23,// %0x00, 0x36, 0x49, 0x55, 0x22, 0x50,// &amp;0x00, 0x00, 0x05, 0x03, 0x00, 0x00,// &#x27;0x00, 0x00, 0x1c, 0x22, 0x41, 0x00,// (0x00, 0x00, 0x41, 0x22, 0x1c, 0x00,// )0x00, 0x14, 0x08, 0x3E, 0x08, 0x14,// *0x00, 0x08, 0x08, 0x3E, 0x08, 0x08,// +0x00, 0x00, 0x00, 0xA0, 0x60, 0x00,// ,0x00, 0x08, 0x08, 0x08, 0x08, 0x08,// -0x00, 0x00, 0x60, 0x60, 0x00, 0x00,// .0x00, 0x20, 0x10, 0x08, 0x04, 0x02,// /0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E,// 00x00, 0x00, 0x42, 0x7F, 0x40, 0x00,// 10x00, 0x42, 0x61, 0x51, 0x49, 0x46,// 20x00, 0x21, 0x41, 0x45, 0x4B, 0x31,// 30x00, 0x18, 0x14, 0x12, 0x7F, 0x10,// 40x00, 0x27, 0x45, 0x45, 0x45, 0x39,// 50x00, 0x3C, 0x4A, 0x49, 0x49, 0x30,// 60x00, 0x01, 0x71, 0x09, 0x05, 0x03,// 70x00, 0x36, 0x49, 0x49, 0x49, 0x36,// 80x00, 0x06, 0x49, 0x49, 0x29, 0x1E,// 90x00, 0x00, 0x36, 0x36, 0x00, 0x00,// :0x00, 0x00, 0x56, 0x36, 0x00, 0x00,// ;0x00, 0x08, 0x14, 0x22, 0x41, 0x00,// &lt;0x00, 0x14, 0x14, 0x14, 0x14, 0x14,// =0x00, 0x00, 0x41, 0x22, 0x14, 0x08,// &gt;0x00, 0x02, 0x01, 0x51, 0x09, 0x06,// ?0x00, 0x32, 0x49, 0x59, 0x51, 0x3E,// @0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C,// A0x00, 0x7F, 0x49, 0x49, 0x49, 0x36,// B0x00, 0x3E, 0x41, 0x41, 0x41, 0x22,// C0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C,// D0x00, 0x7F, 0x49, 0x49, 0x49, 0x41,// E0x00, 0x7F, 0x09, 0x09, 0x09, 0x01,// F0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A,// G0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F,// H0x00, 0x00, 0x41, 0x7F, 0x41, 0x00,// I0x00, 0x20, 0x40, 0x41, 0x3F, 0x01,// J0x00, 0x7F, 0x08, 0x14, 0x22, 0x41,// K0x00, 0x7F, 0x40, 0x40, 0x40, 0x40,// L0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F,// M0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F,// N0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E,// O0x00, 0x7F, 0x09, 0x09, 0x09, 0x06,// P0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E,// Q0x00, 0x7F, 0x09, 0x19, 0x29, 0x46,// R0x00, 0x46, 0x49, 0x49, 0x49, 0x31,// S0x00, 0x01, 0x01, 0x7F, 0x01, 0x01,// T0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F,// U0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F,// V0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F,// W0x00, 0x63, 0x14, 0x08, 0x14, 0x63,// X0x00, 0x07, 0x08, 0x70, 0x08, 0x07,// Y0x00, 0x61, 0x51, 0x49, 0x45, 0x43,// Z0x00, 0x00, 0x7F, 0x41, 0x41, 0x00,// [0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55,// 550x00, 0x00, 0x41, 0x41, 0x7F, 0x00,// ]0x00, 0x04, 0x02, 0x01, 0x02, 0x04,// ^0x00, 0x40, 0x40, 0x40, 0x40, 0x40,// _0x00, 0x00, 0x01, 0x02, 0x04, 0x00,// &#x27;0x00, 0x20, 0x54, 0x54, 0x54, 0x78,// a0x00, 0x7F, 0x48, 0x44, 0x44, 0x38,// b0x00, 0x38, 0x44, 0x44, 0x44, 0x20,// c0x00, 0x38, 0x44, 0x44, 0x48, 0x7F,// d0x00, 0x38, 0x54, 0x54, 0x54, 0x18,// e0x00, 0x08, 0x7E, 0x09, 0x01, 0x02,// f0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C,// g0x00, 0x7F, 0x08, 0x04, 0x04, 0x78,// h0x00, 0x00, 0x44, 0x7D, 0x40, 0x00,// i0x00, 0x40, 0x80, 0x84, 0x7D, 0x00,// j0x00, 0x7F, 0x10, 0x28, 0x44, 0x00,// k0x00, 0x00, 0x41, 0x7F, 0x40, 0x00,// l0x00, 0x7C, 0x04, 0x18, 0x04, 0x78,// m0x00, 0x7C, 0x08, 0x04, 0x04, 0x78,// n0x00, 0x38, 0x44, 0x44, 0x44, 0x38,// o0x00, 0xFC, 0x24, 0x24, 0x24, 0x18,// p0x00, 0x18, 0x24, 0x24, 0x18, 0xFC,// q0x00, 0x7C, 0x08, 0x04, 0x04, 0x08,// r0x00, 0x48, 0x54, 0x54, 0x54, 0x20,// s0x00, 0x04, 0x3F, 0x44, 0x40, 0x20,// t0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C,// u0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C,// v0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C,// w0x00, 0x44, 0x28, 0x10, 0x28, 0x44,// x0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C,// y0x00, 0x44, 0x64, 0x54, 0x4C, 0x44,// z0x14, 0x14, 0x14, 0x14, 0x14, 0x14,// horiz lines&#125;;/****************************************8*16的点阵************************************/const unsigned char F8X16[]= &#123; 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// 0 0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x33,0x30,0x00,0x00,0x00,//! 1 0x00,0x10,0x0C,0x06,0x10,0x0C,0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//&quot; 2 0x40,0xC0,0x78,0x40,0xC0,0x78,0x40,0x00,0x04,0x3F,0x04,0x04,0x3F,0x04,0x04,0x00,//# 3 0x00,0x70,0x88,0xFC,0x08,0x30,0x00,0x00,0x00,0x18,0x20,0xFF,0x21,0x1E,0x00,0x00,//$ 4 0xF0,0x08,0xF0,0x00,0xE0,0x18,0x00,0x00,0x00,0x21,0x1C,0x03,0x1E,0x21,0x1E,0x00,//% 5 0x00,0xF0,0x08,0x88,0x70,0x00,0x00,0x00,0x1E,0x21,0x23,0x24,0x19,0x27,0x21,0x10,//&amp; 6 0x10,0x16,0x0E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//&#x27; 7 0x00,0x00,0x00,0xE0,0x18,0x04,0x02,0x00,0x00,0x00,0x00,0x07,0x18,0x20,0x40,0x00,//( 8 0x00,0x02,0x04,0x18,0xE0,0x00,0x00,0x00,0x00,0x40,0x20,0x18,0x07,0x00,0x00,0x00,//) 9 0x40,0x40,0x80,0xF0,0x80,0x40,0x40,0x00,0x02,0x02,0x01,0x0F,0x01,0x02,0x02,0x00,//* 10 0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x1F,0x01,0x01,0x01,0x00,//+ 11 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0xB0,0x70,0x00,0x00,0x00,0x00,0x00,//, 12 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0x01,0x01,//- 13 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,0x00,0x00,//. 14 0x00,0x00,0x00,0x00,0x80,0x60,0x18,0x04,0x00,0x60,0x18,0x06,0x01,0x00,0x00,0x00,/// 15 0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x0F,0x10,0x20,0x20,0x10,0x0F,0x00,//0 16 0x00,0x10,0x10,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//1 17 0x00,0x70,0x08,0x08,0x08,0x88,0x70,0x00,0x00,0x30,0x28,0x24,0x22,0x21,0x30,0x00,//2 18 0x00,0x30,0x08,0x88,0x88,0x48,0x30,0x00,0x00,0x18,0x20,0x20,0x20,0x11,0x0E,0x00,//3 19 0x00,0x00,0xC0,0x20,0x10,0xF8,0x00,0x00,0x00,0x07,0x04,0x24,0x24,0x3F,0x24,0x00,//4 20 0x00,0xF8,0x08,0x88,0x88,0x08,0x08,0x00,0x00,0x19,0x21,0x20,0x20,0x11,0x0E,0x00,//5 21 0x00,0xE0,0x10,0x88,0x88,0x18,0x00,0x00,0x00,0x0F,0x11,0x20,0x20,0x11,0x0E,0x00,//6 22 0x00,0x38,0x08,0x08,0xC8,0x38,0x08,0x00,0x00,0x00,0x00,0x3F,0x00,0x00,0x00,0x00,//7 23 0x00,0x70,0x88,0x08,0x08,0x88,0x70,0x00,0x00,0x1C,0x22,0x21,0x21,0x22,0x1C,0x00,//8 24 0x00,0xE0,0x10,0x08,0x08,0x10,0xE0,0x00,0x00,0x00,0x31,0x22,0x22,0x11,0x0F,0x00,//9 25 0x00,0x00,0x00,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x00,//: 26 0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x60,0x00,0x00,0x00,0x00,//; 27 0x00,0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x00,//&lt; 28 0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x00,//= 29 0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x01,0x00,//&gt; 30 0x00,0x70,0x48,0x08,0x08,0x08,0xF0,0x00,0x00,0x00,0x00,0x30,0x36,0x01,0x00,0x00,//? 31 0xC0,0x30,0xC8,0x28,0xE8,0x10,0xE0,0x00,0x07,0x18,0x27,0x24,0x23,0x14,0x0B,0x00,//@ 32 0x00,0x00,0xC0,0x38,0xE0,0x00,0x00,0x00,0x20,0x3C,0x23,0x02,0x02,0x27,0x38,0x20,//A 33 0x08,0xF8,0x88,0x88,0x88,0x70,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x11,0x0E,0x00,//B 34 0xC0,0x30,0x08,0x08,0x08,0x08,0x38,0x00,0x07,0x18,0x20,0x20,0x20,0x10,0x08,0x00,//C 35 0x08,0xF8,0x08,0x08,0x08,0x10,0xE0,0x00,0x20,0x3F,0x20,0x20,0x20,0x10,0x0F,0x00,//D 36 0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x20,0x23,0x20,0x18,0x00,//E 37 0x08,0xF8,0x88,0x88,0xE8,0x08,0x10,0x00,0x20,0x3F,0x20,0x00,0x03,0x00,0x00,0x00,//F 38 0xC0,0x30,0x08,0x08,0x08,0x38,0x00,0x00,0x07,0x18,0x20,0x20,0x22,0x1E,0x02,0x00,//G 39 0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x20,0x3F,0x21,0x01,0x01,0x21,0x3F,0x20,//H 40 0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//I 41 0x00,0x00,0x08,0x08,0xF8,0x08,0x08,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,0x00,//J 42 0x08,0xF8,0x88,0xC0,0x28,0x18,0x08,0x00,0x20,0x3F,0x20,0x01,0x26,0x38,0x20,0x00,//K 43 0x08,0xF8,0x08,0x00,0x00,0x00,0x00,0x00,0x20,0x3F,0x20,0x20,0x20,0x20,0x30,0x00,//L 44 0x08,0xF8,0xF8,0x00,0xF8,0xF8,0x08,0x00,0x20,0x3F,0x00,0x3F,0x00,0x3F,0x20,0x00,//M 45 0x08,0xF8,0x30,0xC0,0x00,0x08,0xF8,0x08,0x20,0x3F,0x20,0x00,0x07,0x18,0x3F,0x00,//N 46 0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x10,0x20,0x20,0x20,0x10,0x0F,0x00,//O 47 0x08,0xF8,0x08,0x08,0x08,0x08,0xF0,0x00,0x20,0x3F,0x21,0x01,0x01,0x01,0x00,0x00,//P 48 0xE0,0x10,0x08,0x08,0x08,0x10,0xE0,0x00,0x0F,0x18,0x24,0x24,0x38,0x50,0x4F,0x00,//Q 49 0x08,0xF8,0x88,0x88,0x88,0x88,0x70,0x00,0x20,0x3F,0x20,0x00,0x03,0x0C,0x30,0x20,//R 50 0x00,0x70,0x88,0x08,0x08,0x08,0x38,0x00,0x00,0x38,0x20,0x21,0x21,0x22,0x1C,0x00,//S 51 0x18,0x08,0x08,0xF8,0x08,0x08,0x18,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//T 52 0x08,0xF8,0x08,0x00,0x00,0x08,0xF8,0x08,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//U 53 0x08,0x78,0x88,0x00,0x00,0xC8,0x38,0x08,0x00,0x00,0x07,0x38,0x0E,0x01,0x00,0x00,//V 54 0xF8,0x08,0x00,0xF8,0x00,0x08,0xF8,0x00,0x03,0x3C,0x07,0x00,0x07,0x3C,0x03,0x00,//W 55 0x08,0x18,0x68,0x80,0x80,0x68,0x18,0x08,0x20,0x30,0x2C,0x03,0x03,0x2C,0x30,0x20,//X 56 0x08,0x38,0xC8,0x00,0xC8,0x38,0x08,0x00,0x00,0x00,0x20,0x3F,0x20,0x00,0x00,0x00,//Y 57 0x10,0x08,0x08,0x08,0xC8,0x38,0x08,0x00,0x20,0x38,0x26,0x21,0x20,0x20,0x18,0x00,//Z 58 0x00,0x00,0x00,0xFE,0x02,0x02,0x02,0x00,0x00,0x00,0x00,0x7F,0x40,0x40,0x40,0x00,//[ 59 0x00,0x0C,0x30,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x06,0x38,0xC0,0x00,//\\ 60 0x00,0x02,0x02,0x02,0xFE,0x00,0x00,0x00,0x00,0x40,0x40,0x40,0x7F,0x00,0x00,0x00,//] 61 0x00,0x00,0x04,0x02,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//^ 62 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,//_ 63 0x00,0x02,0x02,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//` 64 0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x19,0x24,0x22,0x22,0x22,0x3F,0x20,//a 65 0x08,0xF8,0x00,0x80,0x80,0x00,0x00,0x00,0x00,0x3F,0x11,0x20,0x20,0x11,0x0E,0x00,//b 66 0x00,0x00,0x00,0x80,0x80,0x80,0x00,0x00,0x00,0x0E,0x11,0x20,0x20,0x20,0x11,0x00,//c 67 0x00,0x00,0x00,0x80,0x80,0x88,0xF8,0x00,0x00,0x0E,0x11,0x20,0x20,0x10,0x3F,0x20,//d 68 0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x22,0x22,0x22,0x22,0x13,0x00,//e 69 0x00,0x80,0x80,0xF0,0x88,0x88,0x88,0x18,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//f 70 0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x6B,0x94,0x94,0x94,0x93,0x60,0x00,//g 71 0x08,0xF8,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//h 72 0x00,0x80,0x98,0x98,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//i 73 0x00,0x00,0x00,0x80,0x98,0x98,0x00,0x00,0x00,0xC0,0x80,0x80,0x80,0x7F,0x00,0x00,//j 74 0x08,0xF8,0x00,0x00,0x80,0x80,0x80,0x00,0x20,0x3F,0x24,0x02,0x2D,0x30,0x20,0x00,//k 75 0x00,0x08,0x08,0xF8,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x3F,0x20,0x20,0x00,0x00,//l 76 0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x20,0x3F,0x20,0x00,0x3F,0x20,0x00,0x3F,//m 77 0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x3F,0x21,0x00,0x00,0x20,0x3F,0x20,//n 78 0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x00,0x1F,0x20,0x20,0x20,0x20,0x1F,0x00,//o 79 0x80,0x80,0x00,0x80,0x80,0x00,0x00,0x00,0x80,0xFF,0xA1,0x20,0x20,0x11,0x0E,0x00,//p 80 0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x00,0x00,0x0E,0x11,0x20,0x20,0xA0,0xFF,0x80,//q 81 0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x20,0x20,0x3F,0x21,0x20,0x00,0x01,0x00,//r 82 0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x33,0x24,0x24,0x24,0x24,0x19,0x00,//s 83 0x00,0x80,0x80,0xE0,0x80,0x80,0x00,0x00,0x00,0x00,0x00,0x1F,0x20,0x20,0x00,0x00,//t 84 0x80,0x80,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x1F,0x20,0x20,0x20,0x10,0x3F,0x20,//u 85 0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x01,0x0E,0x30,0x08,0x06,0x01,0x00,//v 86 0x80,0x80,0x00,0x80,0x00,0x80,0x80,0x80,0x0F,0x30,0x0C,0x03,0x0C,0x30,0x0F,0x00,//w 87 0x00,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x00,0x20,0x31,0x2E,0x0E,0x31,0x20,0x00,//x 88 0x80,0x80,0x80,0x00,0x00,0x80,0x80,0x80,0x80,0x81,0x8E,0x70,0x18,0x06,0x01,0x00,//y 89 0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x00,0x00,0x21,0x30,0x2C,0x22,0x21,0x30,0x00,//z 90 0x00,0x00,0x00,0x00,0x80,0x7C,0x02,0x02,0x00,0x00,0x00,0x00,0x00,0x3F,0x40,0x40,//&#123; 91 0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,//| 92 0x00,0x02,0x02,0x7C,0x80,0x00,0x00,0x00,0x00,0x40,0x40,0x3F,0x00,0x00,0x00,0x00,//&#125; 93 0x00,0x06,0x01,0x01,0x02,0x02,0x04,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//~ 94&#125;;char Hzk[][32]=&#123;&#123;0x80,0x80,0xEE,0x88,0x88,0x88,0xE8,0x8F,0x08,0x88,0x78,0x48,0x4E,0x40,0xC0,0x00&#125;,&#123;0x00,0x00,0x7F,0x24,0x24,0x24,0x7F,0x00,0x81,0x40,0x30,0x0F,0x30,0x41,0x80,0x00&#125;,/*&quot;嵌&quot;,0*/&#123;0x00,0x00,0x00,0x00,0x00,0x01,0xE2,0x1C,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00&#125;,&#123;0x80,0x40,0x20,0x10,0x0C,0x03,0x00,0x00,0x00,0x03,0x0C,0x30,0x40,0x80,0x80,0x00&#125;,/*&quot;入&quot;,1*/&#123;0x10,0x10,0x90,0x90,0x90,0x90,0x90,0x10,0x10,0xFF,0x10,0x10,0x11,0x16,0x10,0x00&#125;,&#123;0x00,0x20,0x60,0x20,0x3F,0x10,0x10,0x10,0x00,0x03,0x0C,0x10,0x20,0x40,0xF8,0x00&#125;,/*&quot;式&quot;,2*/&#125;;#endif 硬件IIC依旧是要先进行初始化 1234567891011121314151617181920212223242526/* USER CODE BEGIN 2 */ OLED_Init(); //OLED初始 OLED_Clear(); //清屏 //上面的初始化以及清屏的代码在一开始处一定要写 /* USER CODE END 2 */ /* Infinite loop */ /* USER CODE BEGIN WHILE */ while (1) &#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ OLED_ShowString(0,0,&quot;I love you&quot;,12, 1); //反相显示8X16字符串 OLED_ShowString(0,2,&quot;ZTY&quot;,12,0);//正相显示6X8字符串 OLED_ShowChinese(0,4,0,1); //反相显示汉字“嵌” OLED_ShowChinese(16,4,1,1);//反相显示汉字“入” OLED_ShowChinese(32,4,2,1);//反相显示汉字“式” OLED_ShowNum(60,5,22,1,12, 0);//正相显示1位8X16数字“12” OLED_ShowNum(48,7,23,2,12, 1);//反相显示2位6X8数字“23”// OLED_DrawBMP(6,6,38,38,BMP1,0);//正相显示图片BMP1 &#125; OLED.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336/* * oled.c * * Created on: 2024年6月13日 * Author: ZTY */#include &quot;oled.h&quot;/********************************************************** * OLED 初始化命令数组，根据芯片手册编写 ***********************************************************/static const uint8_t OLED_InitCmds[] = &#123; 0xAE, // 关闭显示 0xD5, 0x80, // 设置时钟分频 0xA8, 0x3F, // 设置MUX比率 0xD3, 0x00, // 设置显示偏移 0x40, // 设置起始行 0xA1, // 设置横向翻转 0xC8, // 设置垂直翻转 0xDA, 0x12, // 设置电源控制 0x81, 0xCF, // 设置对比度 0xD9, 0xF1, // 设置预充电周期 0xDB, 0x40, // 设置VCOMH 0xA4, // 继续显示RAM内容 0xA6, // 不反相显示 0x8D, 0x14, // 开启电源 0xAF // 打开显示&#125;;/** * @brief OLED 初始化 */void OLED_Init(void) &#123; HAL_Delay(200); // 等待供电稳定 for (uint8_t i = 0; i &lt; sizeof(OLED_InitCmds); i++) &#123; OLED_WriteCommand(OLED_InitCmds[i]); &#125;&#125;/** * @brief 向 OLED 发送控制命令 * @param cmd 芯片手册规定的命令 */void OLED_WriteCommand(uint8_t cmd) &#123; HAL_I2C_Mem_Write(&amp;hi2c1, 0x78, 0x00, I2C_MEMADD_SIZE_8BIT, &amp;cmd, 1, 0x100);&#125;/** * @brief 向 OLED 发送数据 * @param data 要写入的数据 */void OLED_WriteData(uint8_t data) &#123; HAL_I2C_Mem_Write(&amp;hi2c1, 0x78, 0x40, I2C_MEMADD_SIZE_8BIT, &amp;data, 1, 0x100);&#125;/** * @brief 开启 OLED 显示 */void OLED_On(void) &#123; for (uint8_t page = 0; page &lt; 8; page++) &#123; OLED_WriteCommand(0xb0 + page); // 设置页地址 OLED_WriteCommand(0x00); // 设置列低地址 OLED_WriteCommand(0x10); // 设置列高地址 for (uint8_t n = 0; n &lt; 128; n++) &#123; OLED_WriteData(1); // 将每个数据位置为1 &#125; &#125;&#125;/** * @brief 清空 OLED 屏幕 */void OLED_Clear(void) &#123; for (uint8_t page = 0; page &lt; 8; page++) &#123; OLED_WriteCommand(0xb0 + page); // 设置页地址 OLED_WriteCommand(0x00); // 设置列低地址 OLED_WriteCommand(0x10); // 设置列高地址 for (uint8_t n = 0; n &lt; 128; n++) &#123; OLED_WriteData(0); // 将每个数据位置为0 &#125; &#125;&#125;/** * @brief 开启 OLED 显示 */void OLED_DisplayOn(void) &#123; OLED_WriteCommand(0x8D); // 设置 DCDC 命令 OLED_WriteCommand(0x14); // 开启 DCDC OLED_WriteCommand(0xAF); // 打开显示&#125;/** * @brief 关闭 OLED 显示 */void OLED_DisplayOff(void) &#123; OLED_WriteCommand(0x8D); // 设置 DCDC 命令 OLED_WriteCommand(0x10); // 关闭 DCDC OLED_WriteCommand(0xAE); // 关闭显示&#125;/** * @brief 设置光标的位置 * @param x X 坐标 * @param y Y 坐标（页地址） */void OLED_SetPosition(uint8_t x, uint8_t y) &#123; OLED_WriteCommand(0xb0 + y); // 设置页地址 OLED_WriteCommand(((x &amp; 0xF0) &gt;&gt; 4) | 0x10); // 设置列高地址 OLED_WriteCommand(x &amp; 0x0F); // 设置列低地址&#125;/** * @brief 计算 m^n * @param m 底 * @param n 指数 * @return 计算结果 */unsigned int OLED_Pow(uint8_t m, uint8_t n) &#123; unsigned int result = 1; while (n--) &#123; result *= m; &#125; return result;&#125;/** * @brief 在 OLED 显示字符 * @param x 起始横坐标 * @param y 起始纵坐标 * @param chr 显示的字符 * @param FontSize 字体大小 (12 或 16) * @param ColorTurn 是否反相显示 */void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t FontSize, uint8_t ColorTurn) &#123; uint8_t c = chr - &#x27; &#x27;; // 计算字符偏移 if (x &gt; 128 - 1) &#123; x = 0; y += 2; &#125; if (FontSize == 16) &#123; OLED_SetPosition(x, y); for (uint8_t i = 0; i &lt; 8; i++) &#123; OLED_WriteData(ColorTurn ? ~F8X16[c * 16 + i] : F8X16[c * 16 + i]); &#125; OLED_SetPosition(x, y + 1); for (uint8_t i = 0; i &lt; 8; i++) &#123; OLED_WriteData(ColorTurn ? ~F8X16[c * 16 + i + 8] : F8X16[c * 16 + i + 8]); &#125; &#125; else &#123; OLED_SetPosition(x, y); for (uint8_t i = 0; i &lt; 6; i++) &#123; OLED_WriteData(ColorTurn ? ~F6x8[c][i] : F6x8[c][i]); &#125; &#125;&#125;/** * @brief 在 OLED 显示字符串 * @param x 字符串起始横坐标 * @param y 字符串起始纵坐标 * @param str 字符串内容 * @param FontSize 字体大小 (12 或 16) * @param ColorTurn 是否反相显示 */void OLED_ShowString(uint8_t x, uint8_t y, const char *str, uint8_t FontSize, uint8_t ColorTurn) &#123; uint8_t j = 0; while (str[j] != &#x27;\\0&#x27;) &#123; OLED_ShowChar(x, y, str[j], FontSize, ColorTurn); x += (FontSize == 12) ? 6 : 8; // 更新位置 if ((x &gt; 122 &amp;&amp; FontSize == 12) || (x &gt; 120 &amp;&amp; FontSize == 16)) &#123; x = 0; y++; // 换行 &#125; j++; &#125;&#125;/** * @brief 在 OLED 显示数字 * @param x 起始横坐标 * @param y 起始纵坐标 * @param num 显示的数字 * @param len 数字位数 * @param size2 字体大小 * @param ColorTurn 是否反相显示 */void OLED_ShowNum(uint8_t x, uint8_t y, unsigned int num, uint8_t len, uint8_t size2, uint8_t ColorTurn) &#123; uint8_t temp, enshow = 0; for (uint8_t t = 0; t &lt; len; t++) &#123; temp = (num / OLED_Pow(10, len - t - 1)) % 10; if (enshow == 0 &amp;&amp; t &lt; (len - 1)) &#123; if (temp == 0) &#123; OLED_ShowChar(x + (size2 / 2) * t, y, &#x27; &#x27;, size2, ColorTurn); continue; &#125; else &#123; enshow = 1; &#125; &#125; OLED_ShowChar(x + (size2 / 2) * t, y, temp + &#x27;0&#x27;, size2, ColorTurn); &#125;&#125;/** * @brief 在 OLED 显示浮点数 * @param x 起始横坐标 * @param y 起始纵坐标 * @param num 浮点数 * @param z_len 整数部分位数 * @param f_len 小数部分位数 * @param size2 字体大小 * @param ColorTurn 是否反相显示 */void OLED_ShowDecimal(uint8_t x, uint8_t y, float num, uint8_t z_len, uint8_t f_len, uint8_t size2, uint8_t ColorTurn) &#123; int z_temp = (int)num; int f_temp = (int)((num - z_temp) * OLED_Pow(10, f_len)); if (num &lt; 0) &#123; z_len += 1; // 如果是负数，整数位数 +1 OLED_ShowChar(x, y, &#x27;-&#x27;, size2, ColorTurn); // 显示负号 &#125; for (uint8_t t = 0; t &lt; z_len; t++) &#123; uint8_t temp = (z_temp / OLED_Pow(10, z_len - t - 1)) % 10; OLED_ShowChar(x + ((size2 / 2) * t) + (num &lt; 0 ? 6 : 0), y, temp + &#x27;0&#x27;, size2, ColorTurn); &#125; OLED_ShowChar(x + ((size2 / 2) * z_len) + (num &lt; 0 ? 6 : 0), y, &#x27;.&#x27;, size2, ColorTurn); for (uint8_t t = 0; t &lt; f_len; t++) &#123; uint8_t temp = (f_temp / OLED_Pow(10, f_len - t - 1)) % 10; OLED_ShowChar(x + ((size2 / 2) * (t + z_len + 1)) + (num &lt; 0 ? 6 : 0), y, temp + &#x27;0&#x27;, size2, ColorTurn); &#125;&#125;/** * @brief 在 OLED 显示汉字 * @param x 起始横坐标 * @param y 起始纵坐标 * @param no 汉字编号 * @param ColorTurn 是否反相显示 */void OLED_ShowChinese(uint8_t x, uint8_t y, uint8_t no, uint8_t ColorTurn) &#123; OLED_SetPosition(x, y); for (uint8_t t = 0; t &lt; 16; t++) &#123; OLED_WriteData(ColorTurn ? ~Hzk[2 * no][t] : Hzk[2 * no][t]); &#125; OLED_SetPosition(x, y + 1); for (uint8_t t = 0; t &lt; 16; t++) &#123; OLED_WriteData(ColorTurn ? ~Hzk[2 * no + 1][t] : Hzk[2 * no + 1][t]); &#125;&#125;/** * @brief 在指定区域绘制 BMP 图片 * @param x0 图片起始横坐标 * @param y0 图片起始纵坐标 * @param x1 图片结束横坐标 * @param y1 图片结束纵坐标 * @param BMP 图片数据 * @param ColorTurn 是否反相显示 */void OLED_DrawBMP(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t *BMP, uint8_t ColorTurn) &#123; uint32_t j = 0; for (uint8_t y = y0; y &lt; y1; y++) &#123; OLED_SetPosition(x0, y); for (uint8_t x = x0; x &lt; x1; x++) &#123; OLED_WriteData(ColorTurn ? ~BMP[j++] : BMP[j++]); &#125; &#125;&#125;/** * @brief OLED 屏幕内容水平滚动 * @param direction 滚动方向 (LEFT 或 RIGHT) */void OLED_HorizontalShift(uint8_t direction) &#123; OLED_WriteCommand(0x2E); // 停止滚动 OLED_WriteCommand(direction); // 设置滚动方向 OLED_WriteCommand(0x00); // 虚拟字节设置 OLED_WriteCommand(0x00); // 开始页地址 OLED_WriteCommand(0x07); // 滚动间隔 OLED_WriteCommand(0x07); // 结束页地址 OLED_WriteCommand(0x00); // 虚拟字节设置 OLED_WriteCommand(0xFF); // 虚拟字节设置 OLED_WriteCommand(0x2F); // 开启滚动&#125;/** * @brief OLED 屏幕部分内容水平滚动 * @param direction 滚动方向 (LEFT 或 RIGHT) * @param start 开始页地址 * @param end 结束页地址 */void OLED_Some_HorizontalShift(uint8_t direction, uint8_t start, uint8_t end) &#123; OLED_WriteCommand(0x2E); // 停止滚动 OLED_WriteCommand(direction); // 设置滚动方向 OLED_WriteCommand(0x00); // 虚拟字节设置 OLED_WriteCommand(start); // 开始页地址 OLED_WriteCommand(0x07); // 设置滚动步频 OLED_WriteCommand(end); // 结束页地址 OLED_WriteCommand(0x00); // 虚拟字节设置 OLED_WriteCommand(0xFF); // 虚拟字节设置 OLED_WriteCommand(0x2F); // 开启滚动&#125;/** * @brief OLED 屏幕内容垂直和水平滚动 * @param direction 滚动方向 */void OLED_VerticalAndHorizontalShift(uint8_t direction) &#123; OLED_WriteCommand(0x2E); // 停止滚动 OLED_WriteCommand(direction); // 设置滚动方向 OLED_WriteCommand(0x01); // 虚拟字节设置 OLED_WriteCommand(0x00); // 开始页地址 OLED_WriteCommand(0x07); // 帧频 OLED_WriteCommand(0x07); // 结束页地址 OLED_WriteCommand(0x01); // 垂直滚动偏移量 OLED_WriteCommand(0x00); // 虚拟字节设置 OLED_WriteCommand(0xFF); // 虚拟字节设置 OLED_WriteCommand(0x2F); // 开启滚动&#125;/** * @brief 设置 OLED 显示模式 * @param mode ON (0xA7) 或 OFF (0xA6) */void OLED_DisplayMode(uint8_t mode) &#123; OLED_WriteCommand(mode);&#125;/** * @brief 控制 OLED 屏幕亮度 * @param intensity 亮度值 (0x00~0xFF)，RESET=0x7F */void OLED_IntensityControl(uint8_t intensity) &#123; OLED_WriteCommand(0x81); // 设置对比度命令 OLED_WriteCommand(intensity); // 设置对应的对比度值&#125; 其头文件为 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#ifndef OLED_OLED_H_#define OLED_OLED_H_#include &quot;stm32f1xx_hal.h&quot;#include &quot;oledfont.h&quot;extern I2C_HandleTypeDef hi2c1; // 外部 I2C 句柄，允许在其他文件中使用/** * @brief 写入控制命令到 OLED * @param cmd 要发送的命令 */void OLED_WriteCommand(uint8_t cmd);/** * @brief 写入数据到 OLED * @param data 要发送的数据 */void OLED_WriteData(uint8_t data);/** * @brief 初始化 OLED 显示屏 */void OLED_Init(void);/** * @brief 清空 OLED 显示屏 */void OLED_Clear(void);/** * @brief 开启 OLED 显示 */void OLED_DisplayOn(void);/** * @brief 关闭 OLED 显示 */void OLED_DisplayOff(void);/** * @brief 设置 OLED 显示的光标位置 * @param x 横坐标 * @param y 纵坐标（页地址） */void OLED_SetPosition(uint8_t x, uint8_t y);/** * @brief 打开 OLED 显示 */void OLED_On(void);/** * @brief 在 OLED 显示指定位置显示整数 * @param x 显示的横坐标 * @param y 显示的纵坐标 * @param num 要显示的数字 * @param len 数字位数 * @param fontSize 字体大小 * @param colorInverted 是否反相显示（1：反相，0：正常） */void OLED_ShowNum(uint8_t x, uint8_t y, unsigned int num, uint8_t len, uint8_t fontSize, uint8_t colorInverted);/** * @brief 在 OLED 显示指定位置显示浮点数 * @param x 显示的横坐标 * @param y 显示的纵坐标 * @param num 要显示的浮点数 * @param integerLength 整数部分位数 * @param decimalLength 小数部分位数 * @param fontSize 字体大小 * @param colorInverted 是否反相显示（1：反相，0：正常） */void OLED_ShowDecimal(uint8_t x, uint8_t y, float num, uint8_t integerLength, uint8_t decimalLength, uint8_t fontSize, uint8_t colorInverted);/** * @brief 在 OLED 显示指定位置显示字符 * @param x 显示的横坐标 * @param y 显示的纵坐标 * @param chr 要显示的字符 * @param charSize 字体大小（12 或 16） * @param colorInverted 是否反相显示（1：反相，0：正常） */void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t charSize, uint8_t colorInverted);/** * @brief 在 OLED 显示指定位置显示字符串 * @param x 显示的起始横坐标 * @param y 显示的起始纵坐标 * @param str 要显示的字符串 * @param charSize 字体大小（12 或 16） * @param colorInverted 是否反相显示（1：反相，0：正常） */void OLED_ShowString(uint8_t x, uint8_t y, const char *str, uint8_t charSize, uint8_t colorInverted);/** * @brief 在 OLED 显示指定位置显示汉字 * @param x 显示的横坐标 * @param y 显示的纵坐标 * @param characterIndex 汉字编号 * @param colorInverted 是否反相显示（1：反相，0：正常） */void OLED_ShowChinese(uint8_t x, uint8_t y, uint8_t characterIndex, uint8_t colorInverted);/** * @brief 在 OLED 指定区域显示 BMP 图片 * @param x0 图片起始横坐标 * @param y0 图片起始纵坐标 * @param x1 图片结束横坐标 * @param y1 图片结束纵坐标 * @param BMP 图片数据数组 * @param colorInverted 是否反相显示（1：反相，0：正常） */void OLED_DrawBMP(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t *BMP, uint8_t colorInverted);/** * @brief 屏幕内容水平滚动 * @param direction 滚动方向（LEFT 或 RIGHT） */void OLED_HorizontalShift(uint8_t direction);/** * @brief 屏幕部分内容水平滚动 * @param direction 滚动方向（LEFT 或 RIGHT） * @param start 开始页地址 * @param end 结束页地址 */void OLED_Some_HorizontalShift(uint8_t direction, uint8_t start, uint8_t end);/** * @brief 屏幕内容垂直和水平滚动 * @param direction 滚动方向 */void OLED_VerticalAndHorizontalShift(uint8_t direction);/** * @brief 设置 OLED 显示模式 * @param mode ON (0xA7) 或 OFF (0xA6) */void OLED_DisplayMode(uint8_t mode);/** * @brief 控制 OLED 屏幕亮度 * @param intensity 亮度值 (0x00~0xFF)，RESET=0x7F */void OLED_IntensityControl(uint8_t intensity);#endif /* OLED_OLED_H_ */ 四、演示效果 总结本篇内容略少，但这也是为后期的内容做铺垫衔接。后面的内容“干货”会更多一些，敬请期待。 又是经过一个充实而忙碌的夜晚，深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 感谢大家的关注与支持！ 参考文献引用4针0.96寸OLED的HAL库代码（硬件I2C&#x2F;全代码&#x2F;stm32f1&#x2F;CubeMX配置&#x2F;包含有正负浮点数&#x2F;100%一次点亮） HAL库软件IIC、硬件IIC移植江科大0.96寸OLED屏幕代码；软件I2C和硬件I2C区别 【STM32】HAL库 STM32CubeMX教程十二—IIC(读取AT24C02 ) HAL库软件IIC、硬件IIC移植江科大0.96寸OLED屏幕代码；软件I2C和硬件I2C区别","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"External-KEY","slug":"External-KEY","date":"2025-01-15T02:56:38.000Z","updated":"2025-01-15T03:06:42.171Z","comments":true,"path":"2025/01/15/External-KEY/","permalink":"http://example.com/2025/01/15/External-KEY/","excerpt":"","text":"往期内容STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)STM32F1基于HAL库的学习记录实用使用教程分享(二、GPIO_Input 按键) 前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Input的学习 随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，本次是单片机控制里很重要的一个概念：外部中断 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵。 一、外部中断中断机制在计算机系统中区分为硬件中断和软件中断两大类别。硬件中断源自外部设备，如硬盘I&#x2F;O的信号或通过定时器到达，它们通过发送信号以异步方式请求CPU的注意，即中断的发生与CPU当前执行的程序逻辑无直接关联。外部中断实际上是硬件中断的一个子集。 软件中断是由程序内部执行的特定指令（如中断指令或系统调用）所触发，其发生时间与程序执行流程紧密相关，因此被视为同步的。 这两种中断机制共同协作，确保了计算机系统既能及时响应外部事件，又能灵活管理内部资源和服务调用。 1.概念中断：打断CPU执行正常的程序，转而处理紧急程序，然后返回原暂停的程序继续运行。举例：学习ing——-听到老妈叫：吃饭啦！(中断请求)——-前去干饭——-吃完了——-继续学习 2.中断的作用一般来讲，中断有三个作用：实时控制：当温度较高时，自动开启空调功能。故障处理：出现错误时及时修正。数据传输：串口或其他通信方式进行数据的传输 3.中断优先级在中断处理机制中，优先级系统是为确保系统资源的高效分配和紧急事件的及时处理。 包括抢占优先级（pre）和响应优先级（sub）两个关键层面。抢占优先级决定了中断的打断能力，即高抢占优先级的中断能够打断正在执行的低抢占优先级中断，确保紧急任务得到优先处理。而响应优先级则在抢占优先级相同的情况下发挥作用，它决定了中断的响应顺序，即响应优先级高的中断会先被执行，但不同响应优先级的中断间不能相互打断。 当抢占优先级和响应优先级都相同时，自然优先级（通常基于中断向量表中的位置）将作为决定因素，自然优先级越高的中断将先被执行。这里的自然优先级实质上反映了中断在硬件或固件设计中的优先级排序。 在中断优先级体系中，通常遵循“数值越小，优先级越高”的原则，这意味着更低数值的优先级设置代表更高的中断处理优先级，从而确保系统能够迅速响应最紧急的事件 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.引脚配置(1).选择引脚和模式本文是基于第一篇文章的LED后进行的操作，有不了解的同学可以移步STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)进行配置。根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_EXIT，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO modeExternal Interrupt Mode with Rising edge trigger detection上升沿触发外部中断 External Interrupt Mode with Falling edge trigger detection下降沿触发外部中断 External Interrupt Mode with Rising&#x2F;Falling edge trigger detection上升沿或下降沿触发外部中断 External Event Mode with Rising edge trigger detection上升沿触发外部事件 External Event Mode with Falling edge trigger detection下降沿触发外部事件 External Event ode with Rising&#x2F;Falling edge trigger detection上升沿或下降沿触发外部事件 (B).GPIO Pull-up&#x2F;Pull-down通过电路的硬件结构进行上拉或下拉配置 (C).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：KEY(在此我仅以PE6举例，其他引脚(按键)同理)。 (D).配置优先级Priority Group默认为4个比特位，一般情况下不需要改。 Preemption Priority &amp; Sub Priority抢占优先级，数字越小，优先级越高若抢占优先级相同，判断子优先级，同样，数字越小，优先级越高 6.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序sys.h、led.h、stm32f1xx_it.c和stm32f10x_it.h在我的第一篇博客STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)里。 1.HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);此函数用于读取引脚状态，通过GPIO的IDR寄存器读取。电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOE。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_6。在main.h中可找到宏定义： 1234/* Private defines -----------------------------------------------------------*/#define KEY_Pin GPIO_PIN_6#define KEY_GPIO_Port GPIOE#define KEY_EXTI_IRQn EXTI9_5_IRQn 设置按键回调函数为 12345678910111213 /* USER CODE BEGIN 4 */ void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)&#123; if(GPIO_Pin == KEY_Pin) &#123; if(Exit_flag == 0) &#123; Exit_flag = 1; LED_flag = HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin); &#125; &#125;&#125; /* USER CODE END 4 */ 在主函数循环内检测 123456789101112131415161718192021222324252627282930313233343536while (1) &#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ if(Exit_flag == 1) &#123; Exit_flag = 2; if(LED_flag== GPIO_PIN_RESET) &#123; HAL_Delay(20); if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET) &#123; HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); Exit_flag = 0; &#125; else &#123; Exit_flag = 0; &#125; &#125; else if(LED_flag== GPIO_PIN_SET) &#123; HAL_Delay(20); if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) &#123; HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin); Exit_flag = 0; &#125; else &#123; Exit_flag = 0; &#125; &#125; &#125; &#125; 以此实现按键控制小灯状态的功能。 四、演示效果 总结本篇内容略少，但这也是为后期的内容做铺垫衔接。后面的内容“干货”会更多一些，敬请期待。 又是经过一个充实而忙碌的夜晚，深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于**OLED屏幕（IIC）**的学习分享。 与此同时我计划将我的微机原理课程设计逐步分享出来 感谢大家的关注与支持！ 参考文献引用【STM32HAL库】外部中断STM32 CubeMX学习：6. 按键的外部中断","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"GPIO-input","slug":"GPIO-input","date":"2025-01-14T17:36:39.000Z","updated":"2025-01-14T16:44:09.150Z","comments":true,"path":"2025/01/15/GPIO-input/","permalink":"http://example.com/2025/01/15/GPIO-input/","excerpt":"","text":"往期内容STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output) 前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Input的学习 随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，按键的控制即为大部分同学的第二课——按键（GPIO_Input）。 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵。 一、GPIO_InputGPIO支持4种输入模式，分别为：浮空输入、上拉输入、下拉输入、模拟输入。模拟输入的部分我们留在后面的ADC部分再详谈。 1.浮空输入(GPIO_Mode_IN_FLOATING)No pull-up and no pull-down IO口引脚电平是真实的外部连接器件电压，电平有不确定性。 2.上拉输入(GPIO_Mode_IPU)Pull-up I&#x2F;O口默认通过电阻上拉到VCC,不接外部器件时可以读出高电平 3.下拉输入(GPIO_Mode_IPD)Pull-down I&#x2F;O口默认通过电阻下拉到GND,不接外部器件时可以读出低电平 图1-2 下拉输入 4.上拉和下拉的区分用一句话概括：按键外接GND为上拉，外接VCC为下拉。 原因上拉输入就像是给IO口里面接了一个小小的电阻，这个电阻的另一头连着电源正极（VCC）。这样一来，如果外面没接啥东西或者接了个接地的按键没按，IO口就会“知道”是高电平，就像是灯一直是亮着的状态。 这种设置适合那些接地的按键，因为一按按键，IO口就能“知道”电平变化，知道按键被按了。 下拉输入也是给IO口里面接了个电阻，但这回电阻的另一头连着的是地（GND）。这样，如果外面啥也没接或者接了个接电源正极的按键没按，IO口就会“感觉”到是低电平，就像是灯一直是关着的状态。当你按下那个接电源正极的按键时，IO口就能察觉到电平的变化，知道有动作发生了。 下拉输入适合那些接电源正极的按键。 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.KEY引脚配置(1).选择引脚和模式本文是基于上一篇文章的LED后进行的操作，有不了解的同学可以移步STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)进行配置。根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_Input，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO Pull-up&#x2F;Pull-down通过电路的硬件结构进行上拉或下拉配置 (B).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：KEY_IN(在此我仅以PE6举例，其他引脚(按键)同理)。 6.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序sys.h、led.h、stm32f1xx_it.c和stm32f10x_it.h在我的第一篇博客STM32F1基于HAL库的学习记录实用使用教程分享(一、GPIO_Output)里。 1.HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);此函数用于读取引脚状态，通过GPIO的IDR寄存器读取。电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOE。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_6。由于我在User Laber中已将PE6定义标签“KEY_IN”故在main.h中可找到宏定义： 123/* Private defines -----------------------------------------------------------*/#define KEY_IN_Pin GPIO_PIN_6#define KEY_IN_GPIO_Port GPIOE 故按键的检测程序为 1234567891011121314151617/* USER CODE BEGIN WHILE */while (1)&#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ //有按键(PE6)按下 if(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) == GPIO_PIN_RESET) &#123; /* 软件消抖 */ HAL_Delay(20); /* 等待按键1松开 */ while(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) != GPIO_PIN_SET);//当按键松开后才执行后续程序，否则将不断在while里循环 HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);/* 翻转LED*/ &#125;&#125;/* USER CODE END 3 */ 以此实现按键控制小灯状态的功能。 2.按键消抖方法一：软件消抖一般来讲，大部分的消抖方案是使用10~20ms的延时程序进行消抖，这是由于在使用机械按键的时候会产生不稳定的前沿抖动，若不消去抖动的话，在CPU的高速运行状态下极易出现判断失误，当抖动消失后再一次检测键的状态，如果仍保持新电平状态，则确认为真正有键按下。如下代码为普遍的写法逻辑。 12345678910111213//有按键(PE6)按下 if(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) == GPIO_PIN_RESET) &#123; /* 软件消抖 */ HAL_Delay(20); /* 等待按键1松开 */ if(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) == GPIO_PIN_RESET) &#123; HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);/* 翻转LED*/ while(HAL_GPIO_ReadPin(KEY_IN_GPIO_Port,KEY_IN_Pin) != GPIO_PIN_SET);//当按键松开后才执行后续程序，否则将不断在while里循环 &#125; &#125; /* USER CODE END 3 */ 方法二：硬件消抖在学习的过程中，我了解到在按键数量不大的情况下可以使用RS触发器进行消抖操作。为了深入理解，我选择用Proteus进行仿真观察一下，如图3-1。由于精力的原因，没做成动画，仅是简单进行截图演示。 对于RS触发器的原理，简单概括为即使有抖动但是在经过双稳态电路之后，便可输出“漂亮”的矩形波其对比效果如下图，黄色为RS触发器，蓝色为普通的按键： 3.其他方法由于在程序代码中，添加过多延时会浪费CPU资源，造成影响其他功能的使用并产生实时数据滞后性的可能。在后期我将介绍利用中断和ADC的方式进行按键的判断。而在实际应用中，这些方法往往更常用更好用。 四、演示效果 总结本篇内容略少，但这也是为后期的内容做铺垫衔接。后面的关键按键的内容“干货”会更多一些，敬请期待。 又是经过一个充实而忙碌的夜晚，深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于外部中断和对于双击和长按方法的检测的学习分享。 感谢大家的关注与支持！ 参考文献引用【野火】按键消抖模块的设计与验证","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"GPIO-output","slug":"GPIO-output","date":"2025-01-14T14:45:07.000Z","updated":"2025-01-14T16:44:06.692Z","comments":true,"path":"2025/01/14/GPIO-output/","permalink":"http://example.com/2025/01/14/GPIO-output/","excerpt":"","text":"前言本文记录了通过使用STM32F103ZET6单片机进行GPIO_Output的学习本文原链接随着嵌入式行业的兴起，于此记录个人的一些学习过程并进行分享，LED的控制即为大部分同学的第一课——点灯（GPIO_Output）。 本系列对于各个软件的下载及部分配置过程将带过，有需要的同学可以参考其他的博客和经验分享。 本系列使用的芯片有STM32F103C8T6、STM32F103ZET6、STM32F743VIT6。大部分为基于STM32F103ZET6单片机。 常使用的软件包括但不限于：STM32CubeMX6.11.1、STM32CubeIDE 1.15.1、MDK-ARM 5.35、嘉立创EDA(专业版)、SOLIDWORKS 2021、OpenMV IDE、PyCharm、Anaconda。 声明：本文章在编写过程中，我始终致力于尊重并保护所有原创内容及其知识产权。然而，由于信息来源的多样性和复杂性，可能存在个别内容未明确标注出处、存在事实性错误或无意中侵犯了他人的知识产权的情况。对于任何可能存在的上述问题，我深感歉意，并在此提前向受影响的作者表示最诚挚的歉意。我始终秉持着尊重原创、维护知识产权的原则，绝无意侵犯任何人的合法权益。一旦收到您的反馈，我将立即核实并在第一时间内对文章进行修改。这包括但不限于补充相关引用信息、更正错误内容或删除涉嫌侵权的内容。再次感谢您的关注与支持，期待与您共同营造一个更加美好的知识共享空间。新手文章诸多不足，还望海涵 一、GPIO_OutputGPIO支持4种输出模式，分别为：推挽输出、开漏输出、推挽复用输出、开漏复用输出。其后两种复用输出模式一般都是用于外设使用，本文不做过多介绍。 1.推挽输出(Output Push Pull)推挽输出同时在标准库里也叫做：GPIO_Mode_Out_PP推挽复用输出同时在标准库里也叫做：GPIO_Mode_Out_PP IO口输出0或1。一般情况下都是选取这种模式。该模式可以输出高低电平，连接外部数字器件进行控制。 在推挽输出状态下，如果高电平和低电平直接连接在一起，会导致短路电流流入(倒灌)，这极有可能会损坏设备。（由此造成过惨痛的教训） 2.开漏输出(Output Open Drain)开漏输出同时在标准库里也叫做：GPIO_Mode_Out_OD开漏复用输出同时在标准库里也叫做：GPIO_Mode_AF_OD I&#x2F;O口输出0或1。在没有连接上拉电阻的情况下，该接口只能输出低电平，而无法驱动高电平。要实现高电平输出，必须借助外部的上拉电阻。需要注意的是，I&#x2F;O口的实际电平与输出电平可能不一致，这取决于连接的上拉电阻。 开漏输出的一个重要优势是能够灵活地调节输出电平，因为输出电平由上拉电阻所连接的电源电压来决定。因此，开漏输出一般用于需要电平转换的场合。 开漏输出的另一个好处在于可以实现**”线与”**功能，所谓的”线与”指的是多个信号线直接连接在一起，只有当所有信号全部为高电平时，合在一起的总线为高电平；只要有任意一个或者多个信号为低电平，则总线为低电平。 二、配置在选择好芯片并进入配置界面后的操作如下进行 1.RCC外部的高速和低速时钟均有三个可选项目，具体情况需根据个人的硬件情况进行个性化配置，一般选择高速时钟下的：Crystal&#x2F;Ceramic Resonator（外部晶体&#x2F;陶瓷谐振器）如图2-1所示： 2.SYS(1).Debug在STM32CubeMX中配置系统（SYS）时，关于调试接口的设置是一个重要环节。默认情况下，调试功能可能被启用，但如果不需要实时调试或希望优化资源使用，可以选择关闭调试（即选择“No Debug”选项）。然而为了开发便利，我们一般都保留调试接口。 在调试协议的选择上，STM32CubeMX提供了SW（Serial Wire）和JTAG两种选项。鉴于SWD（Serial Wire Debug）模式仅需要两个引脚，且兼容性好、调试效率高，因此它是许多开发者的首选。我选择使用SW协议。 (2).System Wake-UpSystem Wake-Up功能允许STM32微控制器在低功耗模式下被特定的外部事件唤醒。这些外部事件可以包括但不限于外部中断、RTC闹钟、USART接收数据等。 通过配置System Wake-Up功能，微控制器可以在不需要时进入低功耗模式以节省电能，同时在需要时能够快速响应外部事件并恢复正常工作。 (3).Timebase Source通过对 Timebase Source进行合理配置以确保程序的正确运行。通过选择合适的Timebase Source（如SysTick或TIMx），并合理配置其参数，可以实现高效、可靠的时间管理功能。 3.时钟树依此点击：PLL、Enable CSS、HCLK(MHz)改为72之后回车即可。 4.LED引脚配置(1).选择引脚和模式根据硬件点击所需要使用的引脚，之后在弹窗里选择GPIO_Output，如图2-4 ： (2).进行细节配置根据硬件进行细节配置，如图2-5 ： (A).GPIO output levelLow ：IO初始化默认输出低电平High：IO初始化默认输出高电平 (B).GPIO modeOutput Open Drain，开漏输出Output Push Pull ，推挽输出 (C).GPIO Pull-up&#x2F;Pull-downNo pull-up and no pull-down，浮空输入，配置为不上拉和下拉Pull-up，上拉输入Pull-down，下拉输入 (D).Maximum output speedLow，GPIO速度为低速，通常为2MHZMedium，GPIO速度为中速，通常为10MHZHigh，GPIO速度为高速，通常为50MHZ (E).User Laber用户标号，给引脚定义一个易识别的名称，以此以提高代码的可读性和可维护性。我直接定义为：LED。 5.基本定时器（TIM6、TIM7）配置(1).勾选Activated(2).Prescaler (PSC -16 bits value)PSC即为预分频，其参数配置支持 1~65536我在这里使用7199 (3).Counter Period (AutoReload Register - 16 bits value )ARR是一个16位的寄存器，这里装着计数器能计数的最大数值。当计数到这个值的时候，如果使能了中断的话，定时器就会产生溢出中断。我在这里使用99 (4).auto-reload preload自动重装载预加载，在此选择Enable (5).NVIC Settings开启TIM6中断 6.定时时间计算(1).Tout&#x3D;((ARR+1)*(PSC+1))&#x2F;TclkTclk为定时器挂载的时钟线的频率。对于STM32F103而言最高为72Mhz（根据自己的设置有关），具体看配置的时钟树。 在这里我们的溢出时间为：((7199+1)*(99+1))&#x2F;72us&#x3D;10000us&#x3D;10ms 7.工程项目生成(1).项目及编译器(A).Project Name给工程起个名字 (B).Project Location给工程选个存放位置，避免中文路径 (C).Toolchain&#x2F;lDEIDE选择，我在这里选择的是MDK-ARM(即Keil 5) (2).代码生成以下配置勾选后点击界面右上角的：GENERATE CODE (A).Copy all used libraries into the project folder将所有使用过的库复制到项目文件夹中 (B).Generate peripheral initialization as a pair of’c&#x2F;.h’ files per peripheral每个外设生成独立的’.c&#x2F;.h’文件 三、程序1.HAL_GPIO_WritePin(GPIO_TypeDef* GPIOX,uint16_t GPIO_Pin,GPIO_PinState pinstate);电平输出HAL函数GPIOX代表目标引脚的端口号，例如GPIOC。GPIO_Pin代表目标引脚的引脚号，例如GPIO_Pin_13。pinstate代表当前引脚的高低电平，一般来讲：高电平(GPIO_PIN_SET)、低电平(GPIO_PIN_RESET)。由于我在User Laber中已将PC13定义标签“LED”故在main.h中可找到宏定义： 123/* Private defines -----------------------------------------------------------*/#define LED_Pin GPIO_PIN_13#define LED_GPIO_Port GPIOC 故令小灯闪烁的程序为 1234567891011 while (1) &#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);//点亮小灯HAL_Delay(1000);//延时1秒（1000毫秒）HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);//熄灭小灯HAL_Delay(1000);//延时1秒（1000毫秒） &#125; /* USER CODE END 3 */ 以此实现小灯1秒内的循环闪烁效果 2.HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOX,uint16_t GPIO_Pin);电平翻转HAL函数 123456789while (1)&#123; /* USER CODE END WHILE */ /* USER CODE BEGIN 3 */ HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);//反转小灯HAL_Delay(1000);//延时1秒（1000毫秒）&#125; /* USER CODE END 3 */ 以此写法也可以实现每秒翻转一次小灯状态。 3.LED&#x3D;!LED;该写法来源是参考标准库的写法，在后续其他的代码参考与移植中可以变得便利一些。毕竟标准库的例程和开源程序还是有很多的。 同时作为我的学习过程记录备份和代码整体结构的学习记录分享。 (1).sys.h新建一个sys.h文件并写入以下内容并在外部调用： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106#ifndef __SYS_H#define __SYS_H #include &quot;stm32f1xx_hal.h&quot;//0,不支持OS//1,支持OS#define SYSTEM_SUPPORT_OS 0 //定义系统文件夹是否支持OS //位带操作,实现51类似的GPIO控制功能//具体实现思想,参考&lt;&lt;CM3权威指南&gt;&gt;第五章(87页~92页).//IO口操作宏定义#define BITBAND(addr, bitnum) ((addr &amp; 0xF0000000)+0x2000000+((addr &amp;0xFFFFF)&lt;&lt;5)+(bitnum&lt;&lt;2)) #define MEM_ADDR(addr) *((volatile unsigned long *)(addr)) #define BIT_ADDR(addr, bitnum) MEM_ADDR(BITBAND(addr, bitnum)) //IO口地址映射#define GPIOA_ODR_Addr (GPIOA_BASE+12) //0x4001080C #define GPIOB_ODR_Addr (GPIOB_BASE+12) //0x40010C0C #define GPIOC_ODR_Addr (GPIOC_BASE+12) //0x4001100C #define GPIOD_ODR_Addr (GPIOD_BASE+12) //0x4001140C #define GPIOE_ODR_Addr (GPIOE_BASE+12) //0x4001180C #define GPIOF_ODR_Addr (GPIOF_BASE+12) //0x40011A0C #define GPIOG_ODR_Addr (GPIOG_BASE+12) //0x40011E0C #define GPIOA_IDR_Addr (GPIOA_BASE+8) //0x40010808 #define GPIOB_IDR_Addr (GPIOB_BASE+8) //0x40010C08 #define GPIOC_IDR_Addr (GPIOC_BASE+8) //0x40011008 #define GPIOD_IDR_Addr (GPIOD_BASE+8) //0x40011408 #define GPIOE_IDR_Addr (GPIOE_BASE+8) //0x40011808 #define GPIOF_IDR_Addr (GPIOF_BASE+8) //0x40011A08 #define GPIOG_IDR_Addr (GPIOG_BASE+8) //0x40011E08 //IO口操作,只对单一的IO口!//确保n的值小于16!#define PAout(n) BIT_ADDR(GPIOA_ODR_Addr,n) //输出#define PAin(n) BIT_ADDR(GPIOA_IDR_Addr,n) //输入#define PBout(n) BIT_ADDR(GPIOB_ODR_Addr,n) //输出#define PBin(n) BIT_ADDR(GPIOB_IDR_Addr,n) //输入#define PCout(n) BIT_ADDR(GPIOC_ODR_Addr,n) //输出#define PCin(n) BIT_ADDR(GPIOC_IDR_Addr,n) //输入#define PDout(n) BIT_ADDR(GPIOD_ODR_Addr,n) //输出#define PDin(n) BIT_ADDR(GPIOD_IDR_Addr,n) //输入#define PEout(n) BIT_ADDR(GPIOE_ODR_Addr,n) //输出#define PEin(n) BIT_ADDR(GPIOE_IDR_Addr,n) //输入#define PFout(n) BIT_ADDR(GPIOF_ODR_Addr,n) //输出#define PFin(n) BIT_ADDR(GPIOF_IDR_Addr,n) //输入#define PGout(n) BIT_ADDR(GPIOG_ODR_Addr,n) //输出#define PGin(n) BIT_ADDR(GPIOG_IDR_Addr,n) //输入//Ex_NVIC_Config专用定义#define GPIO_A 0#define GPIO_B 1#define GPIO_C 2#define GPIO_D 3#define GPIO_E 4#define GPIO_F 5#define GPIO_G 6 #define FTIR 1 //下降沿触发#define RTIR 2 //上升沿触发 //JTAG模式设置定义#define JTAG_SWD_DISABLE 0X02#define SWD_ENABLE 0X01#define JTAG_SWD_ENABLE 0X00 typedef int32_t s32;typedef int16_t s16;typedef int8_t s8;typedef const int32_t sc32;typedef const int16_t sc16;typedef const int8_t sc8;typedef __IO int32_t vs32;typedef __IO int16_t vs16;typedef __IO int8_t vs8;typedef __I int32_t vsc32;typedef __I int16_t vsc16;typedef __I int8_t vsc8;typedef uint32_t u32;typedef uint16_t u16;typedef uint8_t u8;typedef const uint32_t uc32;typedef const uint16_t uc16;typedef const uint8_t uc8;typedef __IO uint32_t vu32;typedef __IO uint16_t vu16;typedef __IO uint8_t vu8;typedef __I uint32_t vuc32;typedef __I uint16_t vuc16;typedef __I uint8_t vuc8;#endif (2).led.h新建一个led.h文件并写入以下内容并在外部调用： 12345678#ifndef __LED_H#define __LED_H #include &quot;sys.h&quot;#define LED PCout(13) #endif 将PC13引脚进行宏定义 命名为LED (3).stm32f1xx_it.c和stm32f10x_it.hstm32f10x_it.c和stm32f10x_it.h一般是存放STM32工程的中断函数的文件。在此我省去了自动生成的大部分程序，仅留下需要我们人为添加的部分stm32f10x_it.c 12345678910111213141516171819202122232425262728/* Includes ------------------------------------------------------------------*/#include &quot;main.h&quot;#include &quot;stm32f1xx_it.h&quot;/* Private includes ----------------------------------------------------------*//* USER CODE BEGIN Includes */#include &quot;led.h&quot;/* USER CODE END Includes *//* USER CODE BEGIN PM */uint16_t TimerCount10ms = 0;//10ms中断计数变量uint16_t TimerCount500ms = 0;//500ms中断计数变量/* USER CODE END PM *//* USER CODE BEGIN 1 */void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//定时器溢出中断回调函数&#123;//定时器中断时，每进行完一个中断，并不会立刻退出，而是会进入到中断回调函数中 if(htim == &amp;htim6)//10ms进入一次定时器6的中断 &#123; TimerCount10ms=1;//10ms中断计数变量标志位 TimerCount500ms++;//每进入一次中断计数加1 if(TimerCount500ms%50 == 0)//当整除50时进入判断 &#123; LED=!LED;//反转小灯 &#125; &#125;&#125;/* USER CODE END 1 */ stm32f10x_it.hextern 表明变量或者函数是定义在其他其他文件中的。简单理解为：外部调用其他文件中定义的变量即可 1234/* USER CODE BEGIN EFP */extern uint16_t TimerCount10ms;//10ms中断计数变量extern uint16_t TimerCount500ms;//500ms中断计数变量/* USER CODE END EFP */ (4).main.c在此我省去了自动生成的大部分程序，仅留下需要我们人为添加的部分 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091/* Includes ------------------------------------------------------------------*/#include &quot;main.h&quot;#include &quot;tim.h&quot;#include &quot;gpio.h&quot;/* Private includes ----------------------------------------------------------*//* USER CODE BEGIN Includes */#include &quot;led.h&quot;#include &quot;sys.h&quot;/* USER CODE END Includes *//* Private typedef -----------------------------------------------------------*//* USER CODE BEGIN PTD *//* USER CODE END PTD *//* Private define ------------------------------------------------------------*//* USER CODE BEGIN PD *//* USER CODE END PD *//* Private macro -------------------------------------------------------------*//* USER CODE BEGIN PM *//* USER CODE END PM *//* Private variables ---------------------------------------------------------*//* USER CODE BEGIN PV *//* USER CODE END PV *//* Private function prototypes -----------------------------------------------*/void SystemClock_Config(void);/* USER CODE BEGIN PFP *//* USER CODE END PFP *//* Private user code ---------------------------------------------------------*//* USER CODE BEGIN 0 *//* USER CODE END 0 *//** * @brief The application entry point. * @retval int */int main(void)&#123; /* USER CODE BEGIN 1 */ /* USER CODE END 1 */ /* MCU Configuration--------------------------------------------------------*/ /* Reset of all peripherals, Initializes the Flash interface and the Systick. */ HAL_Init(); /* USER CODE BEGIN Init */ /* USER CODE END Init */ /* Configure the system clock */ SystemClock_Config(); /* USER CODE BEGIN SysInit */ /* USER CODE END SysInit */ /* Initialize all configured peripherals */ MX_GPIO_Init(); MX_ADC1_Init(); MX_TIM6_Init(); MX_USART1_UART_Init(); MX_TIM4_Init(); /* USER CODE BEGIN 2 */ HAL_TIM_Base_Start_IT(&amp;htim6); //开启定时器6中断 /* USER CODE END 2 */ /* Infinite loop */ /* USER CODE BEGIN WHILE */ while (1) &#123; if(TimerCount10ms==1)//10ms执行一次 &#123; //在此处可以放入一些执行函数 TimerCount10ms=0;//将标志位置0 &#125; &#125; /* USER CODE END 3 */ 四、演示效果 总结经过一个充实而忙碌的夜晚，我满怀热情地撰写了一篇关于单片机学习的文章，虽然已尽力详尽，但深知文章中仍不免有诸多省略和未及细讲之处。对于那些在阅读过程中仍感意犹未尽、存有疑问的同学，建议大家不妨拓宽视野，多阅读几篇来自不同作者、风格各异的优秀文章。相信通过多角度、多层次的学习，你们定能集百家之长从而对单片机有更加深入和全面的理解。 在此，我的初衷不仅是为初学者提供一份学习路上的指引，也是对自己学习历程的一次回顾与总结。通过分享，我希望能激发更多人对单片机技术的兴趣，共同探索这片充满挑战与机遇的领域。 为了保持内容的连贯性和避免不必要的重复，我计划在未来的博客中，对于本文中已提及但未深入展开的话题，将通过链接的方式引导大家回到本文进行查阅。同时，我也将不断优化和完善文章内容，力求为大家提供更加准确、全面、易于理解的学习资源。 下期预告——关于GPIO_Input的学习分享。 感谢大家的关注与支持 参考文献引用嵌入式-STM32-GPIO输出和输入的HAL库函数GPIO推挽输出和开漏输出模式区别详解【野火】TIM-基本定时器","categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]},{"title":"Hello World","slug":"hello-world","date":"2025-01-07T15:58:54.459Z","updated":"2025-01-07T15:58:54.459Z","comments":true,"path":"2025/01/07/hello-world/","permalink":"http://example.com/2025/01/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"张腾跃","slug":"张腾跃","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/"},{"name":"学习笔记","slug":"张腾跃/学习笔记","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"硬件开发","slug":"张腾跃/学习笔记/硬件开发","permalink":"http://example.com/categories/%E5%BC%A0%E8%85%BE%E8%B7%83/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E7%A1%AC%E4%BB%B6%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"STM32","slug":"STM32","permalink":"http://example.com/tags/STM32/"},{"name":"嵌入式","slug":"嵌入式","permalink":"http://example.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"学习记录","slug":"学习记录","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"}]}